circuit MeshWithDelays :
  module PE :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_12 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_13 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_14 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module PE_15 :
    input clock : Clock
    input reset : Reset
    output io : { flip inR : SInt<8>, flip inD : SInt<8>, outL : SInt<8>, outU : SInt<8>, flip dir : UInt<1>, flip en : UInt<1>}

    node _T = eq(io.dir, UInt<1>("h0")) @[Transposer.scala 110:36]
    node _T_1 = mux(_T, io.inR, io.inD) @[Transposer.scala 110:28]
    reg reg : SInt<8>, clock with :
      reset => (UInt<1>("h0"), reg) @[Reg.scala 15:16]
    when io.en : @[Reg.scala 16:19]
      reg <= _T_1 @[Reg.scala 16:23]
    io.outU <= reg @[Transposer.scala 112:13]
    io.outL <= reg @[Transposer.scala 113:13]

  module AlwaysOutTransposer :
    input clock : Clock
    input reset : Reset
    output io : { flip inRow : { flip ready : UInt<1>, valid : UInt<1>, bits : SInt<8>[4]}, outCol : { flip ready : UInt<1>, valid : UInt<1>, bits : SInt<8>[4]}}

    inst pes_0_0 of PE @[Transposer.scala 116:37]
    pes_0_0.clock <= clock
    pes_0_0.reset <= reset
    inst pes_0_1 of PE_1 @[Transposer.scala 116:37]
    pes_0_1.clock <= clock
    pes_0_1.reset <= reset
    inst pes_0_2 of PE_2 @[Transposer.scala 116:37]
    pes_0_2.clock <= clock
    pes_0_2.reset <= reset
    inst pes_0_3 of PE_3 @[Transposer.scala 116:37]
    pes_0_3.clock <= clock
    pes_0_3.reset <= reset
    inst pes_1_0 of PE_4 @[Transposer.scala 116:37]
    pes_1_0.clock <= clock
    pes_1_0.reset <= reset
    inst pes_1_1 of PE_5 @[Transposer.scala 116:37]
    pes_1_1.clock <= clock
    pes_1_1.reset <= reset
    inst pes_1_2 of PE_6 @[Transposer.scala 116:37]
    pes_1_2.clock <= clock
    pes_1_2.reset <= reset
    inst pes_1_3 of PE_7 @[Transposer.scala 116:37]
    pes_1_3.clock <= clock
    pes_1_3.reset <= reset
    inst pes_2_0 of PE_8 @[Transposer.scala 116:37]
    pes_2_0.clock <= clock
    pes_2_0.reset <= reset
    inst pes_2_1 of PE_9 @[Transposer.scala 116:37]
    pes_2_1.clock <= clock
    pes_2_1.reset <= reset
    inst pes_2_2 of PE_10 @[Transposer.scala 116:37]
    pes_2_2.clock <= clock
    pes_2_2.reset <= reset
    inst pes_2_3 of PE_11 @[Transposer.scala 116:37]
    pes_2_3.clock <= clock
    pes_2_3.reset <= reset
    inst pes_3_0 of PE_12 @[Transposer.scala 116:37]
    pes_3_0.clock <= clock
    pes_3_0.reset <= reset
    inst pes_3_1 of PE_13 @[Transposer.scala 116:37]
    pes_3_1.clock <= clock
    pes_3_1.reset <= reset
    inst pes_3_2 of PE_14 @[Transposer.scala 116:37]
    pes_3_2.clock <= clock
    pes_3_2.reset <= reset
    inst pes_3_3 of PE_15 @[Transposer.scala 116:37]
    pes_3_3.clock <= clock
    pes_3_3.reset <= reset
    reg counter : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Transposer.scala 117:24]
    reg dir : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Transposer.scala 118:20]
    pes_0_0.io.inR <= pes_0_1.io.outL @[Transposer.scala 123:26]
    pes_0_1.io.inR <= pes_0_2.io.outL @[Transposer.scala 123:26]
    pes_0_2.io.inR <= pes_0_3.io.outL @[Transposer.scala 123:26]
    pes_0_3.io.inR <= io.inRow.bits[0] @[Transposer.scala 123:26]
    pes_1_0.io.inR <= pes_1_1.io.outL @[Transposer.scala 123:26]
    pes_1_1.io.inR <= pes_1_2.io.outL @[Transposer.scala 123:26]
    pes_1_2.io.inR <= pes_1_3.io.outL @[Transposer.scala 123:26]
    pes_1_3.io.inR <= io.inRow.bits[1] @[Transposer.scala 123:26]
    pes_2_0.io.inR <= pes_2_1.io.outL @[Transposer.scala 123:26]
    pes_2_1.io.inR <= pes_2_2.io.outL @[Transposer.scala 123:26]
    pes_2_2.io.inR <= pes_2_3.io.outL @[Transposer.scala 123:26]
    pes_2_3.io.inR <= io.inRow.bits[2] @[Transposer.scala 123:26]
    pes_3_0.io.inR <= pes_3_1.io.outL @[Transposer.scala 123:26]
    pes_3_1.io.inR <= pes_3_2.io.outL @[Transposer.scala 123:26]
    pes_3_2.io.inR <= pes_3_3.io.outL @[Transposer.scala 123:26]
    pes_3_3.io.inR <= io.inRow.bits[3] @[Transposer.scala 123:26]
    pes_0_0.io.inD <= pes_1_0.io.outU @[Transposer.scala 129:26]
    pes_0_1.io.inD <= pes_1_1.io.outU @[Transposer.scala 129:26]
    pes_0_2.io.inD <= pes_1_2.io.outU @[Transposer.scala 129:26]
    pes_0_3.io.inD <= pes_1_3.io.outU @[Transposer.scala 129:26]
    pes_1_0.io.inD <= pes_2_0.io.outU @[Transposer.scala 129:26]
    pes_1_1.io.inD <= pes_2_1.io.outU @[Transposer.scala 129:26]
    pes_1_2.io.inD <= pes_2_2.io.outU @[Transposer.scala 129:26]
    pes_1_3.io.inD <= pes_2_3.io.outU @[Transposer.scala 129:26]
    pes_2_0.io.inD <= pes_3_0.io.outU @[Transposer.scala 129:26]
    pes_2_1.io.inD <= pes_3_1.io.outU @[Transposer.scala 129:26]
    pes_2_2.io.inD <= pes_3_2.io.outU @[Transposer.scala 129:26]
    pes_2_3.io.inD <= pes_3_3.io.outU @[Transposer.scala 129:26]
    pes_3_0.io.inD <= io.inRow.bits[0] @[Transposer.scala 129:26]
    pes_3_1.io.inD <= io.inRow.bits[1] @[Transposer.scala 129:26]
    pes_3_2.io.inD <= io.inRow.bits[2] @[Transposer.scala 129:26]
    pes_3_3.io.inD <= io.inRow.bits[3] @[Transposer.scala 129:26]
    pes_0_0.io.dir <= dir @[Transposer.scala 133:32]
    pes_0_1.io.dir <= dir @[Transposer.scala 133:32]
    pes_0_2.io.dir <= dir @[Transposer.scala 133:32]
    pes_0_3.io.dir <= dir @[Transposer.scala 133:32]
    pes_1_0.io.dir <= dir @[Transposer.scala 133:32]
    pes_1_1.io.dir <= dir @[Transposer.scala 133:32]
    pes_1_2.io.dir <= dir @[Transposer.scala 133:32]
    pes_1_3.io.dir <= dir @[Transposer.scala 133:32]
    pes_2_0.io.dir <= dir @[Transposer.scala 133:32]
    pes_2_1.io.dir <= dir @[Transposer.scala 133:32]
    pes_2_2.io.dir <= dir @[Transposer.scala 133:32]
    pes_2_3.io.dir <= dir @[Transposer.scala 133:32]
    pes_3_0.io.dir <= dir @[Transposer.scala 133:32]
    pes_3_1.io.dir <= dir @[Transposer.scala 133:32]
    pes_3_2.io.dir <= dir @[Transposer.scala 133:32]
    pes_3_3.io.dir <= dir @[Transposer.scala 133:32]
    node _T = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_0_0.io.en <= _T @[Transposer.scala 134:31]
    node _T_1 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_0_1.io.en <= _T_1 @[Transposer.scala 134:31]
    node _T_2 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_0_2.io.en <= _T_2 @[Transposer.scala 134:31]
    node _T_3 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_0_3.io.en <= _T_3 @[Transposer.scala 134:31]
    node _T_4 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_1_0.io.en <= _T_4 @[Transposer.scala 134:31]
    node _T_5 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_1_1.io.en <= _T_5 @[Transposer.scala 134:31]
    node _T_6 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_1_2.io.en <= _T_6 @[Transposer.scala 134:31]
    node _T_7 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_1_3.io.en <= _T_7 @[Transposer.scala 134:31]
    node _T_8 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_2_0.io.en <= _T_8 @[Transposer.scala 134:31]
    node _T_9 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_2_1.io.en <= _T_9 @[Transposer.scala 134:31]
    node _T_10 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_2_2.io.en <= _T_10 @[Transposer.scala 134:31]
    node _T_11 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_2_3.io.en <= _T_11 @[Transposer.scala 134:31]
    node _T_12 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_3_0.io.en <= _T_12 @[Transposer.scala 134:31]
    node _T_13 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_3_1.io.en <= _T_13 @[Transposer.scala 134:31]
    node _T_14 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_3_2.io.en <= _T_14 @[Transposer.scala 134:31]
    node _T_15 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    pes_3_3.io.en <= _T_15 @[Transposer.scala 134:31]
    io.outCol.valid <= UInt<1>("h1") @[Transposer.scala 136:19]
    io.inRow.ready <= UInt<1>("h1") @[Transposer.scala 137:18]
    wire left_out : SInt<8>[4] @[Transposer.scala 139:25]
    left_out[0] <= pes_0_0.io.outL @[Transposer.scala 139:25]
    left_out[1] <= pes_1_0.io.outL @[Transposer.scala 139:25]
    left_out[2] <= pes_2_0.io.outL @[Transposer.scala 139:25]
    left_out[3] <= pes_3_0.io.outL @[Transposer.scala 139:25]
    wire up_out : SInt<8>[4] @[Transposer.scala 140:23]
    up_out[0] <= pes_0_0.io.outU @[Transposer.scala 140:23]
    up_out[1] <= pes_0_1.io.outU @[Transposer.scala 140:23]
    up_out[2] <= pes_0_2.io.outU @[Transposer.scala 140:23]
    up_out[3] <= pes_0_3.io.outU @[Transposer.scala 140:23]
    node _T_16 = eq(dir, UInt<1>("h0")) @[Transposer.scala 142:29]
    node _T_17 = mux(_T_16, left_out, up_out) @[Transposer.scala 142:24]
    io.outCol.bits[0] <= _T_17[0] @[Transposer.scala 142:18]
    io.outCol.bits[1] <= _T_17[1] @[Transposer.scala 142:18]
    io.outCol.bits[2] <= _T_17[2] @[Transposer.scala 142:18]
    io.outCol.bits[3] <= _T_17[3] @[Transposer.scala 142:18]
    node _T_18 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    when _T_18 : @[Transposer.scala 144:24]
      node _T_19 = leq(UInt<1>("h1"), UInt<2>("h3")) @[Util.scala 12:16]
      node _T_20 = asUInt(reset) @[Util.scala 12:13]
      node _T_21 = or(_T_19, _T_20) @[Util.scala 12:13]
      node _T_22 = eq(_T_21, UInt<1>("h0")) @[Util.scala 12:13]
      when _T_22 : @[Util.scala 12:13]
        printf(clock, UInt<1>("h1"), "Assertion failed: cannot wrapAdd when n is larger than max\n    at Util.scala:12 assert(n <= max.U, \"cannot wrapAdd when n is larger than max\")\n") @[Util.scala 12:13]
        stop(clock, UInt<1>("h1"), 1) @[Util.scala 12:13]
      node _T_23 = sub(UInt<2>("h3"), UInt<1>("h1")) @[Util.scala 13:22]
      node _T_24 = tail(_T_23, 1) @[Util.scala 13:22]
      node _T_25 = add(_T_24, UInt<1>("h1")) @[Util.scala 13:26]
      node _T_26 = tail(_T_25, 1) @[Util.scala 13:26]
      node _T_27 = geq(counter, _T_26) @[Util.scala 13:13]
      node _T_28 = neq(UInt<1>("h1"), UInt<1>("h0")) @[Util.scala 13:37]
      node _T_29 = and(_T_27, _T_28) @[Util.scala 13:32]
      node _T_30 = sub(UInt<2>("h3"), counter) @[Util.scala 13:57]
      node _T_31 = tail(_T_30, 1) @[Util.scala 13:57]
      node _T_32 = sub(UInt<1>("h1"), _T_31) @[Util.scala 13:48]
      node _T_33 = tail(_T_32, 1) @[Util.scala 13:48]
      node _T_34 = sub(_T_33, UInt<1>("h1")) @[Util.scala 13:62]
      node _T_35 = tail(_T_34, 1) @[Util.scala 13:62]
      node _T_36 = add(counter, UInt<1>("h1")) @[Util.scala 13:71]
      node _T_37 = tail(_T_36, 1) @[Util.scala 13:71]
      node _T_38 = mux(_T_29, _T_35, _T_37) @[Util.scala 13:10]
      counter <= _T_38 @[Transposer.scala 145:13]
    node _T_39 = eq(counter, UInt<2>("h3")) @[Transposer.scala 148:17]
    node _T_40 = and(io.inRow.ready, io.inRow.valid) @[Decoupled.scala 40:37]
    node _T_41 = and(_T_39, _T_40) @[Transposer.scala 148:31]
    when _T_41 : @[Transposer.scala 148:49]
      node _T_42 = not(dir) @[Transposer.scala 149:12]
      dir <= _T_42 @[Transposer.scala 149:9]

  module PE_16 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module PE_17 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module PE_18 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module PE_19 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module Tile :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>[2], flip in_b : SInt<8>[2], flip in_d : SInt<8>[2], flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}[2], flip in_id : UInt<3>[2], flip in_last : UInt<1>[2], out_a : SInt<8>[2], out_c : SInt<8>[2], out_b : SInt<8>[2], out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}[2], out_id : UInt<3>[2], out_last : UInt<1>[2], flip in_valid : UInt<1>[2], out_valid : UInt<1>[2], bad_dataflow : UInt<1>}

    inst tile_0_0 of PE_16 @[Tile.scala 42:44]
    tile_0_0.clock <= clock
    tile_0_0.reset <= reset
    inst tile_0_1 of PE_17 @[Tile.scala 42:44]
    tile_0_1.clock <= clock
    tile_0_1.reset <= reset
    inst tile_1_0 of PE_18 @[Tile.scala 42:44]
    tile_1_0.clock <= clock
    tile_1_0.reset <= reset
    inst tile_1_1 of PE_19 @[Tile.scala 42:44]
    tile_1_1.clock <= clock
    tile_1_1.reset <= reset
    tile_0_0.io.in_a <= io.in_a[0] @[Tile.scala 50:20]
    tile_0_1.io.in_a <= tile_0_0.io.out_a @[Tile.scala 50:20]
    tile_1_0.io.in_a <= io.in_a[1] @[Tile.scala 50:20]
    tile_1_1.io.in_a <= tile_1_0.io.out_a @[Tile.scala 50:20]
    tile_0_0.io.in_b <= io.in_b[0] @[Tile.scala 59:20]
    tile_1_0.io.in_b <= tile_0_0.io.out_b @[Tile.scala 59:20]
    tile_0_1.io.in_b <= io.in_b[1] @[Tile.scala 59:20]
    tile_1_1.io.in_b <= tile_0_1.io.out_b @[Tile.scala 59:20]
    tile_0_0.io.in_d <= io.in_d[0] @[Tile.scala 68:20]
    tile_1_0.io.in_d <= tile_0_0.io.out_c @[Tile.scala 68:20]
    tile_0_1.io.in_d <= io.in_d[1] @[Tile.scala 68:20]
    tile_1_1.io.in_d <= tile_0_1.io.out_c @[Tile.scala 68:20]
    tile_0_0.io.in_control.shift <= io.in_control[0].shift @[Tile.scala 77:26]
    tile_0_0.io.in_control.propagate <= io.in_control[0].propagate @[Tile.scala 77:26]
    tile_0_0.io.in_control.dataflow <= io.in_control[0].dataflow @[Tile.scala 77:26]
    tile_1_0.io.in_control.shift <= tile_0_0.io.out_control.shift @[Tile.scala 77:26]
    tile_1_0.io.in_control.propagate <= tile_0_0.io.out_control.propagate @[Tile.scala 77:26]
    tile_1_0.io.in_control.dataflow <= tile_0_0.io.out_control.dataflow @[Tile.scala 77:26]
    tile_0_1.io.in_control.shift <= io.in_control[1].shift @[Tile.scala 77:26]
    tile_0_1.io.in_control.propagate <= io.in_control[1].propagate @[Tile.scala 77:26]
    tile_0_1.io.in_control.dataflow <= io.in_control[1].dataflow @[Tile.scala 77:26]
    tile_1_1.io.in_control.shift <= tile_0_1.io.out_control.shift @[Tile.scala 77:26]
    tile_1_1.io.in_control.propagate <= tile_0_1.io.out_control.propagate @[Tile.scala 77:26]
    tile_1_1.io.in_control.dataflow <= tile_0_1.io.out_control.dataflow @[Tile.scala 77:26]
    tile_0_0.io.in_valid <= io.in_valid[0] @[Tile.scala 86:24]
    tile_1_0.io.in_valid <= tile_0_0.io.out_valid @[Tile.scala 86:24]
    tile_0_1.io.in_valid <= io.in_valid[1] @[Tile.scala 86:24]
    tile_1_1.io.in_valid <= tile_0_1.io.out_valid @[Tile.scala 86:24]
    tile_0_0.io.in_id <= io.in_id[0] @[Tile.scala 95:21]
    tile_1_0.io.in_id <= tile_0_0.io.out_id @[Tile.scala 95:21]
    tile_0_1.io.in_id <= io.in_id[1] @[Tile.scala 95:21]
    tile_1_1.io.in_id <= tile_0_1.io.out_id @[Tile.scala 95:21]
    tile_0_0.io.in_last <= io.in_last[0] @[Tile.scala 104:23]
    tile_1_0.io.in_last <= tile_0_0.io.out_last @[Tile.scala 104:23]
    tile_0_1.io.in_last <= io.in_last[1] @[Tile.scala 104:23]
    tile_1_1.io.in_last <= tile_0_1.io.out_last @[Tile.scala 104:23]
    io.out_c[0] <= tile_1_0.io.out_c @[Tile.scala 111:17]
    io.out_control[0].shift <= tile_1_0.io.out_control.shift @[Tile.scala 112:23]
    io.out_control[0].propagate <= tile_1_0.io.out_control.propagate @[Tile.scala 112:23]
    io.out_control[0].dataflow <= tile_1_0.io.out_control.dataflow @[Tile.scala 112:23]
    io.out_id[0] <= tile_1_0.io.out_id @[Tile.scala 113:18]
    io.out_last[0] <= tile_1_0.io.out_last @[Tile.scala 114:20]
    io.out_valid[0] <= tile_1_0.io.out_valid @[Tile.scala 115:21]
    io.out_b[0] <= tile_1_0.io.out_b @[Tile.scala 116:17]
    io.out_c[1] <= tile_1_1.io.out_c @[Tile.scala 111:17]
    io.out_control[1].shift <= tile_1_1.io.out_control.shift @[Tile.scala 112:23]
    io.out_control[1].propagate <= tile_1_1.io.out_control.propagate @[Tile.scala 112:23]
    io.out_control[1].dataflow <= tile_1_1.io.out_control.dataflow @[Tile.scala 112:23]
    io.out_id[1] <= tile_1_1.io.out_id @[Tile.scala 113:18]
    io.out_last[1] <= tile_1_1.io.out_last @[Tile.scala 114:20]
    io.out_valid[1] <= tile_1_1.io.out_valid @[Tile.scala 115:21]
    io.out_b[1] <= tile_1_1.io.out_b @[Tile.scala 116:17]
    node _T = or(tile_0_0.io.bad_dataflow, tile_0_1.io.bad_dataflow) @[Tile.scala 119:64]
    node _T_1 = or(tile_1_0.io.bad_dataflow, tile_1_1.io.bad_dataflow) @[Tile.scala 119:64]
    node _T_2 = or(_T, _T_1) @[Tile.scala 119:78]
    io.bad_dataflow <= _T_2 @[Tile.scala 119:19]
    io.out_a[0] <= tile_0_1.io.out_a @[Tile.scala 123:17]
    io.out_a[1] <= tile_1_1.io.out_a @[Tile.scala 123:17]

  module PE_20 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module PE_21 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module PE_22 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module PE_23 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module Tile_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>[2], flip in_b : SInt<8>[2], flip in_d : SInt<8>[2], flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}[2], flip in_id : UInt<3>[2], flip in_last : UInt<1>[2], out_a : SInt<8>[2], out_c : SInt<8>[2], out_b : SInt<8>[2], out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}[2], out_id : UInt<3>[2], out_last : UInt<1>[2], flip in_valid : UInt<1>[2], out_valid : UInt<1>[2], bad_dataflow : UInt<1>}

    inst tile_0_0 of PE_20 @[Tile.scala 42:44]
    tile_0_0.clock <= clock
    tile_0_0.reset <= reset
    inst tile_0_1 of PE_21 @[Tile.scala 42:44]
    tile_0_1.clock <= clock
    tile_0_1.reset <= reset
    inst tile_1_0 of PE_22 @[Tile.scala 42:44]
    tile_1_0.clock <= clock
    tile_1_0.reset <= reset
    inst tile_1_1 of PE_23 @[Tile.scala 42:44]
    tile_1_1.clock <= clock
    tile_1_1.reset <= reset
    tile_0_0.io.in_a <= io.in_a[0] @[Tile.scala 50:20]
    tile_0_1.io.in_a <= tile_0_0.io.out_a @[Tile.scala 50:20]
    tile_1_0.io.in_a <= io.in_a[1] @[Tile.scala 50:20]
    tile_1_1.io.in_a <= tile_1_0.io.out_a @[Tile.scala 50:20]
    tile_0_0.io.in_b <= io.in_b[0] @[Tile.scala 59:20]
    tile_1_0.io.in_b <= tile_0_0.io.out_b @[Tile.scala 59:20]
    tile_0_1.io.in_b <= io.in_b[1] @[Tile.scala 59:20]
    tile_1_1.io.in_b <= tile_0_1.io.out_b @[Tile.scala 59:20]
    tile_0_0.io.in_d <= io.in_d[0] @[Tile.scala 68:20]
    tile_1_0.io.in_d <= tile_0_0.io.out_c @[Tile.scala 68:20]
    tile_0_1.io.in_d <= io.in_d[1] @[Tile.scala 68:20]
    tile_1_1.io.in_d <= tile_0_1.io.out_c @[Tile.scala 68:20]
    tile_0_0.io.in_control.shift <= io.in_control[0].shift @[Tile.scala 77:26]
    tile_0_0.io.in_control.propagate <= io.in_control[0].propagate @[Tile.scala 77:26]
    tile_0_0.io.in_control.dataflow <= io.in_control[0].dataflow @[Tile.scala 77:26]
    tile_1_0.io.in_control.shift <= tile_0_0.io.out_control.shift @[Tile.scala 77:26]
    tile_1_0.io.in_control.propagate <= tile_0_0.io.out_control.propagate @[Tile.scala 77:26]
    tile_1_0.io.in_control.dataflow <= tile_0_0.io.out_control.dataflow @[Tile.scala 77:26]
    tile_0_1.io.in_control.shift <= io.in_control[1].shift @[Tile.scala 77:26]
    tile_0_1.io.in_control.propagate <= io.in_control[1].propagate @[Tile.scala 77:26]
    tile_0_1.io.in_control.dataflow <= io.in_control[1].dataflow @[Tile.scala 77:26]
    tile_1_1.io.in_control.shift <= tile_0_1.io.out_control.shift @[Tile.scala 77:26]
    tile_1_1.io.in_control.propagate <= tile_0_1.io.out_control.propagate @[Tile.scala 77:26]
    tile_1_1.io.in_control.dataflow <= tile_0_1.io.out_control.dataflow @[Tile.scala 77:26]
    tile_0_0.io.in_valid <= io.in_valid[0] @[Tile.scala 86:24]
    tile_1_0.io.in_valid <= tile_0_0.io.out_valid @[Tile.scala 86:24]
    tile_0_1.io.in_valid <= io.in_valid[1] @[Tile.scala 86:24]
    tile_1_1.io.in_valid <= tile_0_1.io.out_valid @[Tile.scala 86:24]
    tile_0_0.io.in_id <= io.in_id[0] @[Tile.scala 95:21]
    tile_1_0.io.in_id <= tile_0_0.io.out_id @[Tile.scala 95:21]
    tile_0_1.io.in_id <= io.in_id[1] @[Tile.scala 95:21]
    tile_1_1.io.in_id <= tile_0_1.io.out_id @[Tile.scala 95:21]
    tile_0_0.io.in_last <= io.in_last[0] @[Tile.scala 104:23]
    tile_1_0.io.in_last <= tile_0_0.io.out_last @[Tile.scala 104:23]
    tile_0_1.io.in_last <= io.in_last[1] @[Tile.scala 104:23]
    tile_1_1.io.in_last <= tile_0_1.io.out_last @[Tile.scala 104:23]
    io.out_c[0] <= tile_1_0.io.out_c @[Tile.scala 111:17]
    io.out_control[0].shift <= tile_1_0.io.out_control.shift @[Tile.scala 112:23]
    io.out_control[0].propagate <= tile_1_0.io.out_control.propagate @[Tile.scala 112:23]
    io.out_control[0].dataflow <= tile_1_0.io.out_control.dataflow @[Tile.scala 112:23]
    io.out_id[0] <= tile_1_0.io.out_id @[Tile.scala 113:18]
    io.out_last[0] <= tile_1_0.io.out_last @[Tile.scala 114:20]
    io.out_valid[0] <= tile_1_0.io.out_valid @[Tile.scala 115:21]
    io.out_b[0] <= tile_1_0.io.out_b @[Tile.scala 116:17]
    io.out_c[1] <= tile_1_1.io.out_c @[Tile.scala 111:17]
    io.out_control[1].shift <= tile_1_1.io.out_control.shift @[Tile.scala 112:23]
    io.out_control[1].propagate <= tile_1_1.io.out_control.propagate @[Tile.scala 112:23]
    io.out_control[1].dataflow <= tile_1_1.io.out_control.dataflow @[Tile.scala 112:23]
    io.out_id[1] <= tile_1_1.io.out_id @[Tile.scala 113:18]
    io.out_last[1] <= tile_1_1.io.out_last @[Tile.scala 114:20]
    io.out_valid[1] <= tile_1_1.io.out_valid @[Tile.scala 115:21]
    io.out_b[1] <= tile_1_1.io.out_b @[Tile.scala 116:17]
    node _T = or(tile_0_0.io.bad_dataflow, tile_0_1.io.bad_dataflow) @[Tile.scala 119:64]
    node _T_1 = or(tile_1_0.io.bad_dataflow, tile_1_1.io.bad_dataflow) @[Tile.scala 119:64]
    node _T_2 = or(_T, _T_1) @[Tile.scala 119:78]
    io.bad_dataflow <= _T_2 @[Tile.scala 119:19]
    io.out_a[0] <= tile_0_1.io.out_a @[Tile.scala 123:17]
    io.out_a[1] <= tile_1_1.io.out_a @[Tile.scala 123:17]

  module PE_24 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module PE_25 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module PE_26 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module PE_27 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module Tile_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>[2], flip in_b : SInt<8>[2], flip in_d : SInt<8>[2], flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}[2], flip in_id : UInt<3>[2], flip in_last : UInt<1>[2], out_a : SInt<8>[2], out_c : SInt<8>[2], out_b : SInt<8>[2], out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}[2], out_id : UInt<3>[2], out_last : UInt<1>[2], flip in_valid : UInt<1>[2], out_valid : UInt<1>[2], bad_dataflow : UInt<1>}

    inst tile_0_0 of PE_24 @[Tile.scala 42:44]
    tile_0_0.clock <= clock
    tile_0_0.reset <= reset
    inst tile_0_1 of PE_25 @[Tile.scala 42:44]
    tile_0_1.clock <= clock
    tile_0_1.reset <= reset
    inst tile_1_0 of PE_26 @[Tile.scala 42:44]
    tile_1_0.clock <= clock
    tile_1_0.reset <= reset
    inst tile_1_1 of PE_27 @[Tile.scala 42:44]
    tile_1_1.clock <= clock
    tile_1_1.reset <= reset
    tile_0_0.io.in_a <= io.in_a[0] @[Tile.scala 50:20]
    tile_0_1.io.in_a <= tile_0_0.io.out_a @[Tile.scala 50:20]
    tile_1_0.io.in_a <= io.in_a[1] @[Tile.scala 50:20]
    tile_1_1.io.in_a <= tile_1_0.io.out_a @[Tile.scala 50:20]
    tile_0_0.io.in_b <= io.in_b[0] @[Tile.scala 59:20]
    tile_1_0.io.in_b <= tile_0_0.io.out_b @[Tile.scala 59:20]
    tile_0_1.io.in_b <= io.in_b[1] @[Tile.scala 59:20]
    tile_1_1.io.in_b <= tile_0_1.io.out_b @[Tile.scala 59:20]
    tile_0_0.io.in_d <= io.in_d[0] @[Tile.scala 68:20]
    tile_1_0.io.in_d <= tile_0_0.io.out_c @[Tile.scala 68:20]
    tile_0_1.io.in_d <= io.in_d[1] @[Tile.scala 68:20]
    tile_1_1.io.in_d <= tile_0_1.io.out_c @[Tile.scala 68:20]
    tile_0_0.io.in_control.shift <= io.in_control[0].shift @[Tile.scala 77:26]
    tile_0_0.io.in_control.propagate <= io.in_control[0].propagate @[Tile.scala 77:26]
    tile_0_0.io.in_control.dataflow <= io.in_control[0].dataflow @[Tile.scala 77:26]
    tile_1_0.io.in_control.shift <= tile_0_0.io.out_control.shift @[Tile.scala 77:26]
    tile_1_0.io.in_control.propagate <= tile_0_0.io.out_control.propagate @[Tile.scala 77:26]
    tile_1_0.io.in_control.dataflow <= tile_0_0.io.out_control.dataflow @[Tile.scala 77:26]
    tile_0_1.io.in_control.shift <= io.in_control[1].shift @[Tile.scala 77:26]
    tile_0_1.io.in_control.propagate <= io.in_control[1].propagate @[Tile.scala 77:26]
    tile_0_1.io.in_control.dataflow <= io.in_control[1].dataflow @[Tile.scala 77:26]
    tile_1_1.io.in_control.shift <= tile_0_1.io.out_control.shift @[Tile.scala 77:26]
    tile_1_1.io.in_control.propagate <= tile_0_1.io.out_control.propagate @[Tile.scala 77:26]
    tile_1_1.io.in_control.dataflow <= tile_0_1.io.out_control.dataflow @[Tile.scala 77:26]
    tile_0_0.io.in_valid <= io.in_valid[0] @[Tile.scala 86:24]
    tile_1_0.io.in_valid <= tile_0_0.io.out_valid @[Tile.scala 86:24]
    tile_0_1.io.in_valid <= io.in_valid[1] @[Tile.scala 86:24]
    tile_1_1.io.in_valid <= tile_0_1.io.out_valid @[Tile.scala 86:24]
    tile_0_0.io.in_id <= io.in_id[0] @[Tile.scala 95:21]
    tile_1_0.io.in_id <= tile_0_0.io.out_id @[Tile.scala 95:21]
    tile_0_1.io.in_id <= io.in_id[1] @[Tile.scala 95:21]
    tile_1_1.io.in_id <= tile_0_1.io.out_id @[Tile.scala 95:21]
    tile_0_0.io.in_last <= io.in_last[0] @[Tile.scala 104:23]
    tile_1_0.io.in_last <= tile_0_0.io.out_last @[Tile.scala 104:23]
    tile_0_1.io.in_last <= io.in_last[1] @[Tile.scala 104:23]
    tile_1_1.io.in_last <= tile_0_1.io.out_last @[Tile.scala 104:23]
    io.out_c[0] <= tile_1_0.io.out_c @[Tile.scala 111:17]
    io.out_control[0].shift <= tile_1_0.io.out_control.shift @[Tile.scala 112:23]
    io.out_control[0].propagate <= tile_1_0.io.out_control.propagate @[Tile.scala 112:23]
    io.out_control[0].dataflow <= tile_1_0.io.out_control.dataflow @[Tile.scala 112:23]
    io.out_id[0] <= tile_1_0.io.out_id @[Tile.scala 113:18]
    io.out_last[0] <= tile_1_0.io.out_last @[Tile.scala 114:20]
    io.out_valid[0] <= tile_1_0.io.out_valid @[Tile.scala 115:21]
    io.out_b[0] <= tile_1_0.io.out_b @[Tile.scala 116:17]
    io.out_c[1] <= tile_1_1.io.out_c @[Tile.scala 111:17]
    io.out_control[1].shift <= tile_1_1.io.out_control.shift @[Tile.scala 112:23]
    io.out_control[1].propagate <= tile_1_1.io.out_control.propagate @[Tile.scala 112:23]
    io.out_control[1].dataflow <= tile_1_1.io.out_control.dataflow @[Tile.scala 112:23]
    io.out_id[1] <= tile_1_1.io.out_id @[Tile.scala 113:18]
    io.out_last[1] <= tile_1_1.io.out_last @[Tile.scala 114:20]
    io.out_valid[1] <= tile_1_1.io.out_valid @[Tile.scala 115:21]
    io.out_b[1] <= tile_1_1.io.out_b @[Tile.scala 116:17]
    node _T = or(tile_0_0.io.bad_dataflow, tile_0_1.io.bad_dataflow) @[Tile.scala 119:64]
    node _T_1 = or(tile_1_0.io.bad_dataflow, tile_1_1.io.bad_dataflow) @[Tile.scala 119:64]
    node _T_2 = or(_T, _T_1) @[Tile.scala 119:78]
    io.bad_dataflow <= _T_2 @[Tile.scala 119:19]
    io.out_a[0] <= tile_0_1.io.out_a @[Tile.scala 123:17]
    io.out_a[1] <= tile_1_1.io.out_a @[Tile.scala 123:17]

  module PE_28 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module PE_29 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module PE_30 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module PE_31 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>, flip in_b : SInt<8>, flip in_d : SInt<8>, out_a : SInt<8>, out_b : SInt<8>, out_c : SInt<8>, flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, flip in_id : UInt<3>, out_id : UInt<3>, flip in_last : UInt<1>, out_last : UInt<1>, flip in_valid : UInt<1>, out_valid : UInt<1>, bad_dataflow : UInt<1>}

    reg c1 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c1) @[PE.scala 50:15]
    reg c2 : SInt<16>, clock with :
      reset => (UInt<1>("h0"), c2) @[PE.scala 51:15]
    io.out_a <= io.in_a @[PE.scala 59:12]
    io.out_control.dataflow <= io.in_control.dataflow @[PE.scala 60:27]
    io.out_control.propagate <= io.in_control.propagate @[PE.scala 61:28]
    io.out_control.shift <= io.in_control.shift @[PE.scala 62:24]
    io.out_id <= io.in_id @[PE.scala 63:13]
    io.out_last <= io.in_last @[PE.scala 64:15]
    io.out_valid <= io.in_valid @[PE.scala 65:16]
    reg last_s : UInt<1>, clock with :
      reset => (UInt<1>("h0"), last_s) @[Reg.scala 15:16]
    when io.in_valid : @[Reg.scala 16:19]
      last_s <= io.in_control.propagate @[Reg.scala 16:23]
    node flip = neq(last_s, io.in_control.propagate) @[PE.scala 68:21]
    node shift_offset = mux(flip, io.in_control.shift, UInt<1>("h0")) @[PE.scala 69:25]
    io.bad_dataflow <= UInt<1>("h0") @[PE.scala 79:19]
    node _T = eq(io.in_control.dataflow, UInt<1>("h0")) @[PE.scala 80:71]
    node _T_1 = and(UInt<1>("h0"), _T) @[PE.scala 80:59]
    node _T_2 = or(UInt<1>("h1"), _T_1) @[PE.scala 80:31]
    when _T_2 : @[PE.scala 80:95]
      node _T_3 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 81:15]
      when _T_3 : @[PE.scala 81:30]
        node _T_4 = dshr(c1, shift_offset) @[PE.scala 82:23]
        node _T_5 = gt(_T_4, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_6 = lt(_T_4, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_7 = mux(_T_6, asSInt(UInt<8>("h80")), _T_4) @[Mux.scala 98:16]
        node _T_8 = mux(_T_5, asSInt(UInt<8>("h7f")), _T_7) @[Mux.scala 98:16]
        node _T_9 = bits(_T_8, 7, 0) @[Arithmetic.scala 126:81]
        node _T_10 = asSInt(_T_9) @[Arithmetic.scala 126:105]
        io.out_c <= _T_10 @[PE.scala 82:16]
        io.out_b <= io.in_b @[PE.scala 83:16]
        wire _WIRE : SInt<8> @[PE.scala 84:33]
        node _T_11 = asUInt(io.in_b) @[PE.scala 84:33]
        node _T_12 = asSInt(_T_11) @[PE.scala 84:33]
        _WIRE <= _T_12 @[PE.scala 84:33]
        node _T_13 = mul(io.in_a, _WIRE) @[Arithmetic.scala 95:49]
        node _T_14 = add(_T_13, c2) @[Arithmetic.scala 95:54]
        node _T_15 = tail(_T_14, 1) @[Arithmetic.scala 95:54]
        node _T_16 = asSInt(_T_15) @[Arithmetic.scala 95:54]
        c2 <= _T_16 @[PE.scala 84:10]
        node _T_17 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node lo = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
        node hi_lo = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi_hi = cat(_T_17, _T_17) @[Cat.scala 30:58]
        node hi = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
        node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
        node lo_1 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_19 = cat(_T_18, lo_1) @[Cat.scala 30:58]
        wire _WIRE_1 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_20 = asSInt(_T_19) @[Arithmetic.scala 119:61]
        _WIRE_1 <= _T_20 @[Arithmetic.scala 119:61]
        c1 <= _WIRE_1 @[PE.scala 85:10]
      else :
        node _T_21 = dshr(c2, shift_offset) @[PE.scala 87:23]
        node _T_22 = gt(_T_21, asSInt(UInt<8>("h7f"))) @[Arithmetic.scala 126:33]
        node _T_23 = lt(_T_21, asSInt(UInt<8>("h80"))) @[Arithmetic.scala 126:60]
        node _T_24 = mux(_T_23, asSInt(UInt<8>("h80")), _T_21) @[Mux.scala 98:16]
        node _T_25 = mux(_T_22, asSInt(UInt<8>("h7f")), _T_24) @[Mux.scala 98:16]
        node _T_26 = bits(_T_25, 7, 0) @[Arithmetic.scala 126:81]
        node _T_27 = asSInt(_T_26) @[Arithmetic.scala 126:105]
        io.out_c <= _T_27 @[PE.scala 87:16]
        io.out_b <= io.in_b @[PE.scala 88:16]
        wire _WIRE_2 : SInt<8> @[PE.scala 89:33]
        node _T_28 = asUInt(io.in_b) @[PE.scala 89:33]
        node _T_29 = asSInt(_T_28) @[PE.scala 89:33]
        _WIRE_2 <= _T_29 @[PE.scala 89:33]
        node _T_30 = mul(io.in_a, _WIRE_2) @[Arithmetic.scala 95:49]
        node _T_31 = add(_T_30, c1) @[Arithmetic.scala 95:54]
        node _T_32 = tail(_T_31, 1) @[Arithmetic.scala 95:54]
        node _T_33 = asSInt(_T_32) @[Arithmetic.scala 95:54]
        c1 <= _T_33 @[PE.scala 89:10]
        node _T_34 = bits(io.in_d, 7, 7) @[Arithmetic.scala 118:26]
        node lo_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node lo_2 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
        node hi_lo_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_hi_1 = cat(_T_34, _T_34) @[Cat.scala 30:58]
        node hi_1 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
        node _T_35 = cat(hi_1, lo_2) @[Cat.scala 30:58]
        node lo_3 = asUInt(io.in_d) @[Cat.scala 30:58]
        node _T_36 = cat(_T_35, lo_3) @[Cat.scala 30:58]
        wire _WIRE_3 : SInt<16> @[Arithmetic.scala 119:61]
        node _T_37 = asSInt(_T_36) @[Arithmetic.scala 119:61]
        _WIRE_3 <= _T_37 @[Arithmetic.scala 119:61]
        c2 <= _WIRE_3 @[PE.scala 90:10]
    else :
      node _T_38 = eq(io.in_control.dataflow, UInt<1>("h1")) @[PE.scala 92:77]
      node _T_39 = and(UInt<1>("h0"), _T_38) @[PE.scala 92:65]
      node _T_40 = or(UInt<1>("h0"), _T_39) @[PE.scala 92:37]
      when _T_40 : @[PE.scala 92:101]
        node _T_41 = eq(io.in_control.propagate, UInt<1>("h1")) @[PE.scala 93:15]
        when _T_41 : @[PE.scala 93:30]
          io.out_c <= c1 @[PE.scala 94:16]
          wire _WIRE_4 : SInt<8> @[PE.scala 95:39]
          node _T_42 = asUInt(c2) @[PE.scala 95:39]
          node _T_43 = asSInt(_T_42) @[PE.scala 95:39]
          _WIRE_4 <= _T_43 @[PE.scala 95:39]
          node _T_44 = mul(io.in_a, _WIRE_4) @[Arithmetic.scala 95:49]
          node _T_45 = add(_T_44, io.in_b) @[Arithmetic.scala 95:54]
          node _T_46 = tail(_T_45, 1) @[Arithmetic.scala 95:54]
          node _T_47 = asSInt(_T_46) @[Arithmetic.scala 95:54]
          io.out_b <= _T_47 @[PE.scala 95:16]
          c1 <= io.in_d @[PE.scala 96:10]
        else :
          io.out_c <= c2 @[PE.scala 98:16]
          wire _WIRE_5 : SInt<8> @[PE.scala 99:39]
          node _T_48 = asUInt(c1) @[PE.scala 99:39]
          node _T_49 = asSInt(_T_48) @[PE.scala 99:39]
          _WIRE_5 <= _T_49 @[PE.scala 99:39]
          node _T_50 = mul(io.in_a, _WIRE_5) @[Arithmetic.scala 95:49]
          node _T_51 = add(_T_50, io.in_b) @[Arithmetic.scala 95:54]
          node _T_52 = tail(_T_51, 1) @[Arithmetic.scala 95:54]
          node _T_53 = asSInt(_T_52) @[Arithmetic.scala 95:54]
          io.out_b <= _T_53 @[PE.scala 99:16]
          c2 <= io.in_d @[PE.scala 100:10]
      else :
        io.bad_dataflow <= UInt<1>("h1") @[PE.scala 103:21]
        io.out_c is invalid @[PE.scala 105:14]
        io.out_b is invalid @[PE.scala 106:14]
    node _T_54 = eq(io.in_valid, UInt<1>("h0")) @[PE.scala 109:9]
    when _T_54 : @[PE.scala 109:17]
      c1 <= c1 @[PE.scala 110:8]
      c2 <= c2 @[PE.scala 111:8]

  module Tile_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>[2], flip in_b : SInt<8>[2], flip in_d : SInt<8>[2], flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}[2], flip in_id : UInt<3>[2], flip in_last : UInt<1>[2], out_a : SInt<8>[2], out_c : SInt<8>[2], out_b : SInt<8>[2], out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}[2], out_id : UInt<3>[2], out_last : UInt<1>[2], flip in_valid : UInt<1>[2], out_valid : UInt<1>[2], bad_dataflow : UInt<1>}

    inst tile_0_0 of PE_28 @[Tile.scala 42:44]
    tile_0_0.clock <= clock
    tile_0_0.reset <= reset
    inst tile_0_1 of PE_29 @[Tile.scala 42:44]
    tile_0_1.clock <= clock
    tile_0_1.reset <= reset
    inst tile_1_0 of PE_30 @[Tile.scala 42:44]
    tile_1_0.clock <= clock
    tile_1_0.reset <= reset
    inst tile_1_1 of PE_31 @[Tile.scala 42:44]
    tile_1_1.clock <= clock
    tile_1_1.reset <= reset
    tile_0_0.io.in_a <= io.in_a[0] @[Tile.scala 50:20]
    tile_0_1.io.in_a <= tile_0_0.io.out_a @[Tile.scala 50:20]
    tile_1_0.io.in_a <= io.in_a[1] @[Tile.scala 50:20]
    tile_1_1.io.in_a <= tile_1_0.io.out_a @[Tile.scala 50:20]
    tile_0_0.io.in_b <= io.in_b[0] @[Tile.scala 59:20]
    tile_1_0.io.in_b <= tile_0_0.io.out_b @[Tile.scala 59:20]
    tile_0_1.io.in_b <= io.in_b[1] @[Tile.scala 59:20]
    tile_1_1.io.in_b <= tile_0_1.io.out_b @[Tile.scala 59:20]
    tile_0_0.io.in_d <= io.in_d[0] @[Tile.scala 68:20]
    tile_1_0.io.in_d <= tile_0_0.io.out_c @[Tile.scala 68:20]
    tile_0_1.io.in_d <= io.in_d[1] @[Tile.scala 68:20]
    tile_1_1.io.in_d <= tile_0_1.io.out_c @[Tile.scala 68:20]
    tile_0_0.io.in_control.shift <= io.in_control[0].shift @[Tile.scala 77:26]
    tile_0_0.io.in_control.propagate <= io.in_control[0].propagate @[Tile.scala 77:26]
    tile_0_0.io.in_control.dataflow <= io.in_control[0].dataflow @[Tile.scala 77:26]
    tile_1_0.io.in_control.shift <= tile_0_0.io.out_control.shift @[Tile.scala 77:26]
    tile_1_0.io.in_control.propagate <= tile_0_0.io.out_control.propagate @[Tile.scala 77:26]
    tile_1_0.io.in_control.dataflow <= tile_0_0.io.out_control.dataflow @[Tile.scala 77:26]
    tile_0_1.io.in_control.shift <= io.in_control[1].shift @[Tile.scala 77:26]
    tile_0_1.io.in_control.propagate <= io.in_control[1].propagate @[Tile.scala 77:26]
    tile_0_1.io.in_control.dataflow <= io.in_control[1].dataflow @[Tile.scala 77:26]
    tile_1_1.io.in_control.shift <= tile_0_1.io.out_control.shift @[Tile.scala 77:26]
    tile_1_1.io.in_control.propagate <= tile_0_1.io.out_control.propagate @[Tile.scala 77:26]
    tile_1_1.io.in_control.dataflow <= tile_0_1.io.out_control.dataflow @[Tile.scala 77:26]
    tile_0_0.io.in_valid <= io.in_valid[0] @[Tile.scala 86:24]
    tile_1_0.io.in_valid <= tile_0_0.io.out_valid @[Tile.scala 86:24]
    tile_0_1.io.in_valid <= io.in_valid[1] @[Tile.scala 86:24]
    tile_1_1.io.in_valid <= tile_0_1.io.out_valid @[Tile.scala 86:24]
    tile_0_0.io.in_id <= io.in_id[0] @[Tile.scala 95:21]
    tile_1_0.io.in_id <= tile_0_0.io.out_id @[Tile.scala 95:21]
    tile_0_1.io.in_id <= io.in_id[1] @[Tile.scala 95:21]
    tile_1_1.io.in_id <= tile_0_1.io.out_id @[Tile.scala 95:21]
    tile_0_0.io.in_last <= io.in_last[0] @[Tile.scala 104:23]
    tile_1_0.io.in_last <= tile_0_0.io.out_last @[Tile.scala 104:23]
    tile_0_1.io.in_last <= io.in_last[1] @[Tile.scala 104:23]
    tile_1_1.io.in_last <= tile_0_1.io.out_last @[Tile.scala 104:23]
    io.out_c[0] <= tile_1_0.io.out_c @[Tile.scala 111:17]
    io.out_control[0].shift <= tile_1_0.io.out_control.shift @[Tile.scala 112:23]
    io.out_control[0].propagate <= tile_1_0.io.out_control.propagate @[Tile.scala 112:23]
    io.out_control[0].dataflow <= tile_1_0.io.out_control.dataflow @[Tile.scala 112:23]
    io.out_id[0] <= tile_1_0.io.out_id @[Tile.scala 113:18]
    io.out_last[0] <= tile_1_0.io.out_last @[Tile.scala 114:20]
    io.out_valid[0] <= tile_1_0.io.out_valid @[Tile.scala 115:21]
    io.out_b[0] <= tile_1_0.io.out_b @[Tile.scala 116:17]
    io.out_c[1] <= tile_1_1.io.out_c @[Tile.scala 111:17]
    io.out_control[1].shift <= tile_1_1.io.out_control.shift @[Tile.scala 112:23]
    io.out_control[1].propagate <= tile_1_1.io.out_control.propagate @[Tile.scala 112:23]
    io.out_control[1].dataflow <= tile_1_1.io.out_control.dataflow @[Tile.scala 112:23]
    io.out_id[1] <= tile_1_1.io.out_id @[Tile.scala 113:18]
    io.out_last[1] <= tile_1_1.io.out_last @[Tile.scala 114:20]
    io.out_valid[1] <= tile_1_1.io.out_valid @[Tile.scala 115:21]
    io.out_b[1] <= tile_1_1.io.out_b @[Tile.scala 116:17]
    node _T = or(tile_0_0.io.bad_dataflow, tile_0_1.io.bad_dataflow) @[Tile.scala 119:64]
    node _T_1 = or(tile_1_0.io.bad_dataflow, tile_1_1.io.bad_dataflow) @[Tile.scala 119:64]
    node _T_2 = or(_T, _T_1) @[Tile.scala 119:78]
    io.bad_dataflow <= _T_2 @[Tile.scala 119:19]
    io.out_a[0] <= tile_0_1.io.out_a @[Tile.scala 123:17]
    io.out_a[1] <= tile_1_1.io.out_a @[Tile.scala 123:17]

  module Mesh :
    input clock : Clock
    input reset : Reset
    output io : { flip in_a : SInt<8>[2][2], flip in_b : SInt<8>[2][2], flip in_d : SInt<8>[2][2], flip in_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}[2][2], flip in_id : UInt<3>[2][2], flip in_last : UInt<1>[2][2], out_b : SInt<8>[2][2], out_c : SInt<8>[2][2], flip in_valid : UInt<1>[2][2], out_valid : UInt<1>[2][2], out_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}[2][2], out_id : UInt<3>[2][2], out_last : UInt<1>[2][2]}

    inst mesh_0_0 of Tile @[Mesh.scala 38:68]
    mesh_0_0.clock <= clock
    mesh_0_0.reset <= reset
    inst mesh_0_1 of Tile_1 @[Mesh.scala 38:68]
    mesh_0_1.clock <= clock
    mesh_0_1.reset <= reset
    inst mesh_1_0 of Tile_2 @[Mesh.scala 38:68]
    mesh_1_0.clock <= clock
    mesh_1_0.reset <= reset
    inst mesh_1_1 of Tile_3 @[Mesh.scala 38:68]
    mesh_1_1.clock <= clock
    mesh_1_1.reset <= reset
    reg r : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r[0] <= io.in_a[0][0] @[Reg.scala 16:23]
      r[1] <= io.in_a[0][1] @[Reg.scala 16:23]
    reg r_1 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_1) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_1[0] <= r[0] @[Reg.scala 16:23]
      r_1[1] <= r[1] @[Reg.scala 16:23]
    mesh_0_0.io.in_a[0] <= r_1[0] @[Mesh.scala 52:22]
    mesh_0_0.io.in_a[1] <= r_1[1] @[Mesh.scala 52:22]
    reg r_2 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_2) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_2[0] <= mesh_0_0.io.out_a[0] @[Reg.scala 16:23]
      r_2[1] <= mesh_0_0.io.out_a[1] @[Reg.scala 16:23]
    reg r_3 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_3) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_3[0] <= r_2[0] @[Reg.scala 16:23]
      r_3[1] <= r_2[1] @[Reg.scala 16:23]
    mesh_0_1.io.in_a[0] <= r_3[0] @[Mesh.scala 52:22]
    mesh_0_1.io.in_a[1] <= r_3[1] @[Mesh.scala 52:22]
    reg r_4 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_4) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_4[0] <= io.in_a[1][0] @[Reg.scala 16:23]
      r_4[1] <= io.in_a[1][1] @[Reg.scala 16:23]
    reg r_5 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_5) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_5[0] <= r_4[0] @[Reg.scala 16:23]
      r_5[1] <= r_4[1] @[Reg.scala 16:23]
    mesh_1_0.io.in_a[0] <= r_5[0] @[Mesh.scala 52:22]
    mesh_1_0.io.in_a[1] <= r_5[1] @[Mesh.scala 52:22]
    reg r_6 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_6) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_6[0] <= mesh_1_0.io.out_a[0] @[Reg.scala 16:23]
      r_6[1] <= mesh_1_0.io.out_a[1] @[Reg.scala 16:23]
    reg r_7 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_7) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_7[0] <= r_6[0] @[Reg.scala 16:23]
      r_7[1] <= r_6[1] @[Reg.scala 16:23]
    mesh_1_1.io.in_a[0] <= r_7[0] @[Mesh.scala 52:22]
    mesh_1_1.io.in_a[1] <= r_7[1] @[Mesh.scala 52:22]
    reg v : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v <= io.in_valid[0][0] @[Valid.scala 117:22]
    reg b : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), b) @[Reg.scala 15:16]
    when io.in_valid[0][0] : @[Reg.scala 16:19]
      b[0] <= io.in_b[0][0] @[Reg.scala 16:23]
      b[1] <= io.in_b[0][1] @[Reg.scala 16:23]
    reg outPipe_valid : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid <= v @[Valid.scala 117:22]
    reg outPipe_bits : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), outPipe_bits) @[Reg.scala 15:16]
    when v : @[Reg.scala 16:19]
      outPipe_bits[0] <= b[0] @[Reg.scala 16:23]
      outPipe_bits[1] <= b[1] @[Reg.scala 16:23]
    wire out : { valid : UInt<1>, bits : SInt<8>[2]} @[Valid.scala 112:21]
    out.valid <= outPipe_valid @[Valid.scala 113:17]
    out.bits[0] <= outPipe_bits[0] @[Valid.scala 114:16]
    out.bits[1] <= outPipe_bits[1] @[Valid.scala 114:16]
    mesh_0_0.io.in_b[0] <= out.bits[0] @[Mesh.scala 61:22]
    mesh_0_0.io.in_b[1] <= out.bits[1] @[Mesh.scala 61:22]
    reg v_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_1 <= mesh_0_0.io.out_valid[0] @[Valid.scala 117:22]
    reg b_1 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), b_1) @[Reg.scala 15:16]
    when mesh_0_0.io.out_valid[0] : @[Reg.scala 16:19]
      b_1[0] <= mesh_0_0.io.out_b[0] @[Reg.scala 16:23]
      b_1[1] <= mesh_0_0.io.out_b[1] @[Reg.scala 16:23]
    reg outPipe_valid_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_1 <= v_1 @[Valid.scala 117:22]
    reg outPipe_bits_1 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), outPipe_bits_1) @[Reg.scala 15:16]
    when v_1 : @[Reg.scala 16:19]
      outPipe_bits_1[0] <= b_1[0] @[Reg.scala 16:23]
      outPipe_bits_1[1] <= b_1[1] @[Reg.scala 16:23]
    wire out_1 : { valid : UInt<1>, bits : SInt<8>[2]} @[Valid.scala 112:21]
    out_1.valid <= outPipe_valid_1 @[Valid.scala 113:17]
    out_1.bits[0] <= outPipe_bits_1[0] @[Valid.scala 114:16]
    out_1.bits[1] <= outPipe_bits_1[1] @[Valid.scala 114:16]
    mesh_1_0.io.in_b[0] <= out_1.bits[0] @[Mesh.scala 61:22]
    mesh_1_0.io.in_b[1] <= out_1.bits[1] @[Mesh.scala 61:22]
    reg v_2 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_2 <= io.in_valid[1][0] @[Valid.scala 117:22]
    reg b_2 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), b_2) @[Reg.scala 15:16]
    when io.in_valid[1][0] : @[Reg.scala 16:19]
      b_2[0] <= io.in_b[1][0] @[Reg.scala 16:23]
      b_2[1] <= io.in_b[1][1] @[Reg.scala 16:23]
    reg outPipe_valid_2 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_2 <= v_2 @[Valid.scala 117:22]
    reg outPipe_bits_2 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), outPipe_bits_2) @[Reg.scala 15:16]
    when v_2 : @[Reg.scala 16:19]
      outPipe_bits_2[0] <= b_2[0] @[Reg.scala 16:23]
      outPipe_bits_2[1] <= b_2[1] @[Reg.scala 16:23]
    wire out_2 : { valid : UInt<1>, bits : SInt<8>[2]} @[Valid.scala 112:21]
    out_2.valid <= outPipe_valid_2 @[Valid.scala 113:17]
    out_2.bits[0] <= outPipe_bits_2[0] @[Valid.scala 114:16]
    out_2.bits[1] <= outPipe_bits_2[1] @[Valid.scala 114:16]
    mesh_0_1.io.in_b[0] <= out_2.bits[0] @[Mesh.scala 61:22]
    mesh_0_1.io.in_b[1] <= out_2.bits[1] @[Mesh.scala 61:22]
    reg v_3 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_3 <= mesh_0_1.io.out_valid[0] @[Valid.scala 117:22]
    reg b_3 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), b_3) @[Reg.scala 15:16]
    when mesh_0_1.io.out_valid[0] : @[Reg.scala 16:19]
      b_3[0] <= mesh_0_1.io.out_b[0] @[Reg.scala 16:23]
      b_3[1] <= mesh_0_1.io.out_b[1] @[Reg.scala 16:23]
    reg outPipe_valid_3 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_3 <= v_3 @[Valid.scala 117:22]
    reg outPipe_bits_3 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), outPipe_bits_3) @[Reg.scala 15:16]
    when v_3 : @[Reg.scala 16:19]
      outPipe_bits_3[0] <= b_3[0] @[Reg.scala 16:23]
      outPipe_bits_3[1] <= b_3[1] @[Reg.scala 16:23]
    wire out_3 : { valid : UInt<1>, bits : SInt<8>[2]} @[Valid.scala 112:21]
    out_3.valid <= outPipe_valid_3 @[Valid.scala 113:17]
    out_3.bits[0] <= outPipe_bits_3[0] @[Valid.scala 114:16]
    out_3.bits[1] <= outPipe_bits_3[1] @[Valid.scala 114:16]
    mesh_1_1.io.in_b[0] <= out_3.bits[0] @[Mesh.scala 61:22]
    mesh_1_1.io.in_b[1] <= out_3.bits[1] @[Mesh.scala 61:22]
    reg v_4 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_4 <= io.in_valid[0][0] @[Valid.scala 117:22]
    reg b_4 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), b_4) @[Reg.scala 15:16]
    when io.in_valid[0][0] : @[Reg.scala 16:19]
      b_4[0] <= io.in_d[0][0] @[Reg.scala 16:23]
      b_4[1] <= io.in_d[0][1] @[Reg.scala 16:23]
    reg outPipe_valid_4 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_4 <= v_4 @[Valid.scala 117:22]
    reg outPipe_bits_4 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), outPipe_bits_4) @[Reg.scala 15:16]
    when v_4 : @[Reg.scala 16:19]
      outPipe_bits_4[0] <= b_4[0] @[Reg.scala 16:23]
      outPipe_bits_4[1] <= b_4[1] @[Reg.scala 16:23]
    wire out_4 : { valid : UInt<1>, bits : SInt<8>[2]} @[Valid.scala 112:21]
    out_4.valid <= outPipe_valid_4 @[Valid.scala 113:17]
    out_4.bits[0] <= outPipe_bits_4[0] @[Valid.scala 114:16]
    out_4.bits[1] <= outPipe_bits_4[1] @[Valid.scala 114:16]
    mesh_0_0.io.in_d[0] <= out_4.bits[0] @[Mesh.scala 70:22]
    mesh_0_0.io.in_d[1] <= out_4.bits[1] @[Mesh.scala 70:22]
    reg v_5 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_5 <= mesh_0_0.io.out_valid[0] @[Valid.scala 117:22]
    reg b_5 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), b_5) @[Reg.scala 15:16]
    when mesh_0_0.io.out_valid[0] : @[Reg.scala 16:19]
      b_5[0] <= mesh_0_0.io.out_c[0] @[Reg.scala 16:23]
      b_5[1] <= mesh_0_0.io.out_c[1] @[Reg.scala 16:23]
    reg outPipe_valid_5 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_5 <= v_5 @[Valid.scala 117:22]
    reg outPipe_bits_5 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), outPipe_bits_5) @[Reg.scala 15:16]
    when v_5 : @[Reg.scala 16:19]
      outPipe_bits_5[0] <= b_5[0] @[Reg.scala 16:23]
      outPipe_bits_5[1] <= b_5[1] @[Reg.scala 16:23]
    wire out_5 : { valid : UInt<1>, bits : SInt<8>[2]} @[Valid.scala 112:21]
    out_5.valid <= outPipe_valid_5 @[Valid.scala 113:17]
    out_5.bits[0] <= outPipe_bits_5[0] @[Valid.scala 114:16]
    out_5.bits[1] <= outPipe_bits_5[1] @[Valid.scala 114:16]
    mesh_1_0.io.in_d[0] <= out_5.bits[0] @[Mesh.scala 70:22]
    mesh_1_0.io.in_d[1] <= out_5.bits[1] @[Mesh.scala 70:22]
    reg v_6 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_6 <= io.in_valid[1][0] @[Valid.scala 117:22]
    reg b_6 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), b_6) @[Reg.scala 15:16]
    when io.in_valid[1][0] : @[Reg.scala 16:19]
      b_6[0] <= io.in_d[1][0] @[Reg.scala 16:23]
      b_6[1] <= io.in_d[1][1] @[Reg.scala 16:23]
    reg outPipe_valid_6 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_6 <= v_6 @[Valid.scala 117:22]
    reg outPipe_bits_6 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), outPipe_bits_6) @[Reg.scala 15:16]
    when v_6 : @[Reg.scala 16:19]
      outPipe_bits_6[0] <= b_6[0] @[Reg.scala 16:23]
      outPipe_bits_6[1] <= b_6[1] @[Reg.scala 16:23]
    wire out_6 : { valid : UInt<1>, bits : SInt<8>[2]} @[Valid.scala 112:21]
    out_6.valid <= outPipe_valid_6 @[Valid.scala 113:17]
    out_6.bits[0] <= outPipe_bits_6[0] @[Valid.scala 114:16]
    out_6.bits[1] <= outPipe_bits_6[1] @[Valid.scala 114:16]
    mesh_0_1.io.in_d[0] <= out_6.bits[0] @[Mesh.scala 70:22]
    mesh_0_1.io.in_d[1] <= out_6.bits[1] @[Mesh.scala 70:22]
    reg v_7 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_7 <= mesh_0_1.io.out_valid[0] @[Valid.scala 117:22]
    reg b_7 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), b_7) @[Reg.scala 15:16]
    when mesh_0_1.io.out_valid[0] : @[Reg.scala 16:19]
      b_7[0] <= mesh_0_1.io.out_c[0] @[Reg.scala 16:23]
      b_7[1] <= mesh_0_1.io.out_c[1] @[Reg.scala 16:23]
    reg outPipe_valid_7 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_7 <= v_7 @[Valid.scala 117:22]
    reg outPipe_bits_7 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), outPipe_bits_7) @[Reg.scala 15:16]
    when v_7 : @[Reg.scala 16:19]
      outPipe_bits_7[0] <= b_7[0] @[Reg.scala 16:23]
      outPipe_bits_7[1] <= b_7[1] @[Reg.scala 16:23]
    wire out_7 : { valid : UInt<1>, bits : SInt<8>[2]} @[Valid.scala 112:21]
    out_7.valid <= outPipe_valid_7 @[Valid.scala 113:17]
    out_7.bits[0] <= outPipe_bits_7[0] @[Valid.scala 114:16]
    out_7.bits[1] <= outPipe_bits_7[1] @[Valid.scala 114:16]
    mesh_1_1.io.in_d[0] <= out_7.bits[0] @[Mesh.scala 70:22]
    mesh_1_1.io.in_d[1] <= out_7.bits[1] @[Mesh.scala 70:22]
    node _T = or(mesh_0_0.io.bad_dataflow, mesh_0_1.io.bad_dataflow) @[Mesh.scala 76:54]
    node _T_1 = or(mesh_1_0.io.bad_dataflow, mesh_1_1.io.bad_dataflow) @[Mesh.scala 76:54]
    node _T_2 = or(_T, _T_1) @[Mesh.scala 76:68]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[Mesh.scala 76:10]
    node _T_4 = asUInt(reset) @[Mesh.scala 76:9]
    node _T_5 = or(_T_3, _T_4) @[Mesh.scala 76:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[Mesh.scala 76:9]
    when _T_6 : @[Mesh.scala 76:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at Mesh.scala:76 assert(!(mesh.map(_.map(_.io.bad_dataflow).reduce(_||_)).reduce(_||_)))\n") @[Mesh.scala 76:9]
      stop(clock, UInt<1>("h1"), 1) @[Mesh.scala 76:9]
    reg v_8 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_8 <= io.in_valid[0][0] @[Valid.scala 117:22]
    reg b_8 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), b_8) @[Reg.scala 15:16]
    when io.in_valid[0][0] : @[Reg.scala 16:19]
      b_8 <= io.in_control[0][0].shift @[Reg.scala 16:23]
    reg outPipe_valid_8 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_8 <= v_8 @[Valid.scala 117:22]
    reg outPipe_bits_8 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_8) @[Reg.scala 15:16]
    when v_8 : @[Reg.scala 16:19]
      outPipe_bits_8 <= b_8 @[Reg.scala 16:23]
    wire out_8 : { valid : UInt<1>, bits : UInt<4>} @[Valid.scala 112:21]
    out_8.valid <= outPipe_valid_8 @[Valid.scala 113:17]
    out_8.bits <= outPipe_bits_8 @[Valid.scala 114:16]
    mesh_0_0.io.in_control[0].shift <= out_8.bits @[Mesh.scala 81:27]
    reg v_9 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_9 <= io.in_valid[0][0] @[Valid.scala 117:22]
    reg b_9 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_9) @[Reg.scala 15:16]
    when io.in_valid[0][0] : @[Reg.scala 16:19]
      b_9 <= io.in_control[0][0].dataflow @[Reg.scala 16:23]
    reg outPipe_valid_9 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_9 <= v_9 @[Valid.scala 117:22]
    reg outPipe_bits_9 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_9) @[Reg.scala 15:16]
    when v_9 : @[Reg.scala 16:19]
      outPipe_bits_9 <= b_9 @[Reg.scala 16:23]
    wire out_9 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_9.valid <= outPipe_valid_9 @[Valid.scala 113:17]
    out_9.bits <= outPipe_bits_9 @[Valid.scala 114:16]
    mesh_0_0.io.in_control[0].dataflow <= out_9.bits @[Mesh.scala 82:30]
    reg v_10 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_10 <= io.in_valid[0][0] @[Valid.scala 117:22]
    reg b_10 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_10) @[Reg.scala 15:16]
    when io.in_valid[0][0] : @[Reg.scala 16:19]
      b_10 <= io.in_control[0][0].propagate @[Reg.scala 16:23]
    reg outPipe_valid_10 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_10 <= v_10 @[Valid.scala 117:22]
    reg outPipe_bits_10 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_10) @[Reg.scala 15:16]
    when v_10 : @[Reg.scala 16:19]
      outPipe_bits_10 <= b_10 @[Reg.scala 16:23]
    wire out_10 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_10.valid <= outPipe_valid_10 @[Valid.scala 113:17]
    out_10.bits <= outPipe_bits_10 @[Valid.scala 114:16]
    mesh_0_0.io.in_control[0].propagate <= out_10.bits @[Mesh.scala 83:31]
    reg v_11 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_11 <= io.in_valid[0][1] @[Valid.scala 117:22]
    reg b_11 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), b_11) @[Reg.scala 15:16]
    when io.in_valid[0][1] : @[Reg.scala 16:19]
      b_11 <= io.in_control[0][1].shift @[Reg.scala 16:23]
    reg outPipe_valid_11 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_11 <= v_11 @[Valid.scala 117:22]
    reg outPipe_bits_11 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_11) @[Reg.scala 15:16]
    when v_11 : @[Reg.scala 16:19]
      outPipe_bits_11 <= b_11 @[Reg.scala 16:23]
    wire out_11 : { valid : UInt<1>, bits : UInt<4>} @[Valid.scala 112:21]
    out_11.valid <= outPipe_valid_11 @[Valid.scala 113:17]
    out_11.bits <= outPipe_bits_11 @[Valid.scala 114:16]
    mesh_0_0.io.in_control[1].shift <= out_11.bits @[Mesh.scala 81:27]
    reg v_12 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_12 <= io.in_valid[0][1] @[Valid.scala 117:22]
    reg b_12 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_12) @[Reg.scala 15:16]
    when io.in_valid[0][1] : @[Reg.scala 16:19]
      b_12 <= io.in_control[0][1].dataflow @[Reg.scala 16:23]
    reg outPipe_valid_12 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_12 <= v_12 @[Valid.scala 117:22]
    reg outPipe_bits_12 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_12) @[Reg.scala 15:16]
    when v_12 : @[Reg.scala 16:19]
      outPipe_bits_12 <= b_12 @[Reg.scala 16:23]
    wire out_12 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_12.valid <= outPipe_valid_12 @[Valid.scala 113:17]
    out_12.bits <= outPipe_bits_12 @[Valid.scala 114:16]
    mesh_0_0.io.in_control[1].dataflow <= out_12.bits @[Mesh.scala 82:30]
    reg v_13 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_13 <= io.in_valid[0][1] @[Valid.scala 117:22]
    reg b_13 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_13) @[Reg.scala 15:16]
    when io.in_valid[0][1] : @[Reg.scala 16:19]
      b_13 <= io.in_control[0][1].propagate @[Reg.scala 16:23]
    reg outPipe_valid_13 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_13 <= v_13 @[Valid.scala 117:22]
    reg outPipe_bits_13 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_13) @[Reg.scala 15:16]
    when v_13 : @[Reg.scala 16:19]
      outPipe_bits_13 <= b_13 @[Reg.scala 16:23]
    wire out_13 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_13.valid <= outPipe_valid_13 @[Valid.scala 113:17]
    out_13.bits <= outPipe_bits_13 @[Valid.scala 114:16]
    mesh_0_0.io.in_control[1].propagate <= out_13.bits @[Mesh.scala 83:31]
    reg v_14 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_14 <= mesh_0_0.io.out_valid[0] @[Valid.scala 117:22]
    reg b_14 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), b_14) @[Reg.scala 15:16]
    when mesh_0_0.io.out_valid[0] : @[Reg.scala 16:19]
      b_14 <= mesh_0_0.io.out_control[0].shift @[Reg.scala 16:23]
    reg outPipe_valid_14 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_14 <= v_14 @[Valid.scala 117:22]
    reg outPipe_bits_14 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_14) @[Reg.scala 15:16]
    when v_14 : @[Reg.scala 16:19]
      outPipe_bits_14 <= b_14 @[Reg.scala 16:23]
    wire out_14 : { valid : UInt<1>, bits : UInt<4>} @[Valid.scala 112:21]
    out_14.valid <= outPipe_valid_14 @[Valid.scala 113:17]
    out_14.bits <= outPipe_bits_14 @[Valid.scala 114:16]
    mesh_1_0.io.in_control[0].shift <= out_14.bits @[Mesh.scala 81:27]
    reg v_15 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_15 <= mesh_0_0.io.out_valid[0] @[Valid.scala 117:22]
    reg b_15 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_15) @[Reg.scala 15:16]
    when mesh_0_0.io.out_valid[0] : @[Reg.scala 16:19]
      b_15 <= mesh_0_0.io.out_control[0].dataflow @[Reg.scala 16:23]
    reg outPipe_valid_15 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_15 <= v_15 @[Valid.scala 117:22]
    reg outPipe_bits_15 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_15) @[Reg.scala 15:16]
    when v_15 : @[Reg.scala 16:19]
      outPipe_bits_15 <= b_15 @[Reg.scala 16:23]
    wire out_15 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_15.valid <= outPipe_valid_15 @[Valid.scala 113:17]
    out_15.bits <= outPipe_bits_15 @[Valid.scala 114:16]
    mesh_1_0.io.in_control[0].dataflow <= out_15.bits @[Mesh.scala 82:30]
    reg v_16 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_16 <= mesh_0_0.io.out_valid[0] @[Valid.scala 117:22]
    reg b_16 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_16) @[Reg.scala 15:16]
    when mesh_0_0.io.out_valid[0] : @[Reg.scala 16:19]
      b_16 <= mesh_0_0.io.out_control[0].propagate @[Reg.scala 16:23]
    reg outPipe_valid_16 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_16 <= v_16 @[Valid.scala 117:22]
    reg outPipe_bits_16 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_16) @[Reg.scala 15:16]
    when v_16 : @[Reg.scala 16:19]
      outPipe_bits_16 <= b_16 @[Reg.scala 16:23]
    wire out_16 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_16.valid <= outPipe_valid_16 @[Valid.scala 113:17]
    out_16.bits <= outPipe_bits_16 @[Valid.scala 114:16]
    mesh_1_0.io.in_control[0].propagate <= out_16.bits @[Mesh.scala 83:31]
    reg v_17 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_17 <= mesh_0_0.io.out_valid[1] @[Valid.scala 117:22]
    reg b_17 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), b_17) @[Reg.scala 15:16]
    when mesh_0_0.io.out_valid[1] : @[Reg.scala 16:19]
      b_17 <= mesh_0_0.io.out_control[1].shift @[Reg.scala 16:23]
    reg outPipe_valid_17 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_17 <= v_17 @[Valid.scala 117:22]
    reg outPipe_bits_17 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_17) @[Reg.scala 15:16]
    when v_17 : @[Reg.scala 16:19]
      outPipe_bits_17 <= b_17 @[Reg.scala 16:23]
    wire out_17 : { valid : UInt<1>, bits : UInt<4>} @[Valid.scala 112:21]
    out_17.valid <= outPipe_valid_17 @[Valid.scala 113:17]
    out_17.bits <= outPipe_bits_17 @[Valid.scala 114:16]
    mesh_1_0.io.in_control[1].shift <= out_17.bits @[Mesh.scala 81:27]
    reg v_18 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_18 <= mesh_0_0.io.out_valid[1] @[Valid.scala 117:22]
    reg b_18 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_18) @[Reg.scala 15:16]
    when mesh_0_0.io.out_valid[1] : @[Reg.scala 16:19]
      b_18 <= mesh_0_0.io.out_control[1].dataflow @[Reg.scala 16:23]
    reg outPipe_valid_18 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_18 <= v_18 @[Valid.scala 117:22]
    reg outPipe_bits_18 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_18) @[Reg.scala 15:16]
    when v_18 : @[Reg.scala 16:19]
      outPipe_bits_18 <= b_18 @[Reg.scala 16:23]
    wire out_18 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_18.valid <= outPipe_valid_18 @[Valid.scala 113:17]
    out_18.bits <= outPipe_bits_18 @[Valid.scala 114:16]
    mesh_1_0.io.in_control[1].dataflow <= out_18.bits @[Mesh.scala 82:30]
    reg v_19 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_19 <= mesh_0_0.io.out_valid[1] @[Valid.scala 117:22]
    reg b_19 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_19) @[Reg.scala 15:16]
    when mesh_0_0.io.out_valid[1] : @[Reg.scala 16:19]
      b_19 <= mesh_0_0.io.out_control[1].propagate @[Reg.scala 16:23]
    reg outPipe_valid_19 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_19 <= v_19 @[Valid.scala 117:22]
    reg outPipe_bits_19 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_19) @[Reg.scala 15:16]
    when v_19 : @[Reg.scala 16:19]
      outPipe_bits_19 <= b_19 @[Reg.scala 16:23]
    wire out_19 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_19.valid <= outPipe_valid_19 @[Valid.scala 113:17]
    out_19.bits <= outPipe_bits_19 @[Valid.scala 114:16]
    mesh_1_0.io.in_control[1].propagate <= out_19.bits @[Mesh.scala 83:31]
    reg v_20 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_20 <= io.in_valid[1][0] @[Valid.scala 117:22]
    reg b_20 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), b_20) @[Reg.scala 15:16]
    when io.in_valid[1][0] : @[Reg.scala 16:19]
      b_20 <= io.in_control[1][0].shift @[Reg.scala 16:23]
    reg outPipe_valid_20 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_20 <= v_20 @[Valid.scala 117:22]
    reg outPipe_bits_20 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_20) @[Reg.scala 15:16]
    when v_20 : @[Reg.scala 16:19]
      outPipe_bits_20 <= b_20 @[Reg.scala 16:23]
    wire out_20 : { valid : UInt<1>, bits : UInt<4>} @[Valid.scala 112:21]
    out_20.valid <= outPipe_valid_20 @[Valid.scala 113:17]
    out_20.bits <= outPipe_bits_20 @[Valid.scala 114:16]
    mesh_0_1.io.in_control[0].shift <= out_20.bits @[Mesh.scala 81:27]
    reg v_21 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_21 <= io.in_valid[1][0] @[Valid.scala 117:22]
    reg b_21 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_21) @[Reg.scala 15:16]
    when io.in_valid[1][0] : @[Reg.scala 16:19]
      b_21 <= io.in_control[1][0].dataflow @[Reg.scala 16:23]
    reg outPipe_valid_21 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_21 <= v_21 @[Valid.scala 117:22]
    reg outPipe_bits_21 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_21) @[Reg.scala 15:16]
    when v_21 : @[Reg.scala 16:19]
      outPipe_bits_21 <= b_21 @[Reg.scala 16:23]
    wire out_21 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_21.valid <= outPipe_valid_21 @[Valid.scala 113:17]
    out_21.bits <= outPipe_bits_21 @[Valid.scala 114:16]
    mesh_0_1.io.in_control[0].dataflow <= out_21.bits @[Mesh.scala 82:30]
    reg v_22 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_22 <= io.in_valid[1][0] @[Valid.scala 117:22]
    reg b_22 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_22) @[Reg.scala 15:16]
    when io.in_valid[1][0] : @[Reg.scala 16:19]
      b_22 <= io.in_control[1][0].propagate @[Reg.scala 16:23]
    reg outPipe_valid_22 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_22 <= v_22 @[Valid.scala 117:22]
    reg outPipe_bits_22 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_22) @[Reg.scala 15:16]
    when v_22 : @[Reg.scala 16:19]
      outPipe_bits_22 <= b_22 @[Reg.scala 16:23]
    wire out_22 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_22.valid <= outPipe_valid_22 @[Valid.scala 113:17]
    out_22.bits <= outPipe_bits_22 @[Valid.scala 114:16]
    mesh_0_1.io.in_control[0].propagate <= out_22.bits @[Mesh.scala 83:31]
    reg v_23 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_23 <= io.in_valid[1][1] @[Valid.scala 117:22]
    reg b_23 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), b_23) @[Reg.scala 15:16]
    when io.in_valid[1][1] : @[Reg.scala 16:19]
      b_23 <= io.in_control[1][1].shift @[Reg.scala 16:23]
    reg outPipe_valid_23 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_23 <= v_23 @[Valid.scala 117:22]
    reg outPipe_bits_23 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_23) @[Reg.scala 15:16]
    when v_23 : @[Reg.scala 16:19]
      outPipe_bits_23 <= b_23 @[Reg.scala 16:23]
    wire out_23 : { valid : UInt<1>, bits : UInt<4>} @[Valid.scala 112:21]
    out_23.valid <= outPipe_valid_23 @[Valid.scala 113:17]
    out_23.bits <= outPipe_bits_23 @[Valid.scala 114:16]
    mesh_0_1.io.in_control[1].shift <= out_23.bits @[Mesh.scala 81:27]
    reg v_24 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_24 <= io.in_valid[1][1] @[Valid.scala 117:22]
    reg b_24 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_24) @[Reg.scala 15:16]
    when io.in_valid[1][1] : @[Reg.scala 16:19]
      b_24 <= io.in_control[1][1].dataflow @[Reg.scala 16:23]
    reg outPipe_valid_24 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_24 <= v_24 @[Valid.scala 117:22]
    reg outPipe_bits_24 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_24) @[Reg.scala 15:16]
    when v_24 : @[Reg.scala 16:19]
      outPipe_bits_24 <= b_24 @[Reg.scala 16:23]
    wire out_24 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_24.valid <= outPipe_valid_24 @[Valid.scala 113:17]
    out_24.bits <= outPipe_bits_24 @[Valid.scala 114:16]
    mesh_0_1.io.in_control[1].dataflow <= out_24.bits @[Mesh.scala 82:30]
    reg v_25 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_25 <= io.in_valid[1][1] @[Valid.scala 117:22]
    reg b_25 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_25) @[Reg.scala 15:16]
    when io.in_valid[1][1] : @[Reg.scala 16:19]
      b_25 <= io.in_control[1][1].propagate @[Reg.scala 16:23]
    reg outPipe_valid_25 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_25 <= v_25 @[Valid.scala 117:22]
    reg outPipe_bits_25 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_25) @[Reg.scala 15:16]
    when v_25 : @[Reg.scala 16:19]
      outPipe_bits_25 <= b_25 @[Reg.scala 16:23]
    wire out_25 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_25.valid <= outPipe_valid_25 @[Valid.scala 113:17]
    out_25.bits <= outPipe_bits_25 @[Valid.scala 114:16]
    mesh_0_1.io.in_control[1].propagate <= out_25.bits @[Mesh.scala 83:31]
    reg v_26 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_26 <= mesh_0_1.io.out_valid[0] @[Valid.scala 117:22]
    reg b_26 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), b_26) @[Reg.scala 15:16]
    when mesh_0_1.io.out_valid[0] : @[Reg.scala 16:19]
      b_26 <= mesh_0_1.io.out_control[0].shift @[Reg.scala 16:23]
    reg outPipe_valid_26 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_26 <= v_26 @[Valid.scala 117:22]
    reg outPipe_bits_26 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_26) @[Reg.scala 15:16]
    when v_26 : @[Reg.scala 16:19]
      outPipe_bits_26 <= b_26 @[Reg.scala 16:23]
    wire out_26 : { valid : UInt<1>, bits : UInt<4>} @[Valid.scala 112:21]
    out_26.valid <= outPipe_valid_26 @[Valid.scala 113:17]
    out_26.bits <= outPipe_bits_26 @[Valid.scala 114:16]
    mesh_1_1.io.in_control[0].shift <= out_26.bits @[Mesh.scala 81:27]
    reg v_27 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_27 <= mesh_0_1.io.out_valid[0] @[Valid.scala 117:22]
    reg b_27 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_27) @[Reg.scala 15:16]
    when mesh_0_1.io.out_valid[0] : @[Reg.scala 16:19]
      b_27 <= mesh_0_1.io.out_control[0].dataflow @[Reg.scala 16:23]
    reg outPipe_valid_27 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_27 <= v_27 @[Valid.scala 117:22]
    reg outPipe_bits_27 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_27) @[Reg.scala 15:16]
    when v_27 : @[Reg.scala 16:19]
      outPipe_bits_27 <= b_27 @[Reg.scala 16:23]
    wire out_27 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_27.valid <= outPipe_valid_27 @[Valid.scala 113:17]
    out_27.bits <= outPipe_bits_27 @[Valid.scala 114:16]
    mesh_1_1.io.in_control[0].dataflow <= out_27.bits @[Mesh.scala 82:30]
    reg v_28 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_28 <= mesh_0_1.io.out_valid[0] @[Valid.scala 117:22]
    reg b_28 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_28) @[Reg.scala 15:16]
    when mesh_0_1.io.out_valid[0] : @[Reg.scala 16:19]
      b_28 <= mesh_0_1.io.out_control[0].propagate @[Reg.scala 16:23]
    reg outPipe_valid_28 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_28 <= v_28 @[Valid.scala 117:22]
    reg outPipe_bits_28 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_28) @[Reg.scala 15:16]
    when v_28 : @[Reg.scala 16:19]
      outPipe_bits_28 <= b_28 @[Reg.scala 16:23]
    wire out_28 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_28.valid <= outPipe_valid_28 @[Valid.scala 113:17]
    out_28.bits <= outPipe_bits_28 @[Valid.scala 114:16]
    mesh_1_1.io.in_control[0].propagate <= out_28.bits @[Mesh.scala 83:31]
    reg v_29 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_29 <= mesh_0_1.io.out_valid[1] @[Valid.scala 117:22]
    reg b_29 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), b_29) @[Reg.scala 15:16]
    when mesh_0_1.io.out_valid[1] : @[Reg.scala 16:19]
      b_29 <= mesh_0_1.io.out_control[1].shift @[Reg.scala 16:23]
    reg outPipe_valid_29 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_29 <= v_29 @[Valid.scala 117:22]
    reg outPipe_bits_29 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_29) @[Reg.scala 15:16]
    when v_29 : @[Reg.scala 16:19]
      outPipe_bits_29 <= b_29 @[Reg.scala 16:23]
    wire out_29 : { valid : UInt<1>, bits : UInt<4>} @[Valid.scala 112:21]
    out_29.valid <= outPipe_valid_29 @[Valid.scala 113:17]
    out_29.bits <= outPipe_bits_29 @[Valid.scala 114:16]
    mesh_1_1.io.in_control[1].shift <= out_29.bits @[Mesh.scala 81:27]
    reg v_30 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_30 <= mesh_0_1.io.out_valid[1] @[Valid.scala 117:22]
    reg b_30 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_30) @[Reg.scala 15:16]
    when mesh_0_1.io.out_valid[1] : @[Reg.scala 16:19]
      b_30 <= mesh_0_1.io.out_control[1].dataflow @[Reg.scala 16:23]
    reg outPipe_valid_30 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_30 <= v_30 @[Valid.scala 117:22]
    reg outPipe_bits_30 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_30) @[Reg.scala 15:16]
    when v_30 : @[Reg.scala 16:19]
      outPipe_bits_30 <= b_30 @[Reg.scala 16:23]
    wire out_30 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_30.valid <= outPipe_valid_30 @[Valid.scala 113:17]
    out_30.bits <= outPipe_bits_30 @[Valid.scala 114:16]
    mesh_1_1.io.in_control[1].dataflow <= out_30.bits @[Mesh.scala 82:30]
    reg v_31 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    v_31 <= mesh_0_1.io.out_valid[1] @[Valid.scala 117:22]
    reg b_31 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), b_31) @[Reg.scala 15:16]
    when mesh_0_1.io.out_valid[1] : @[Reg.scala 16:19]
      b_31 <= mesh_0_1.io.out_control[1].propagate @[Reg.scala 16:23]
    reg outPipe_valid_31 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), UInt<1>("h0")) @[Valid.scala 117:22]
    outPipe_valid_31 <= v_31 @[Valid.scala 117:22]
    reg outPipe_bits_31 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), outPipe_bits_31) @[Reg.scala 15:16]
    when v_31 : @[Reg.scala 16:19]
      outPipe_bits_31 <= b_31 @[Reg.scala 16:23]
    wire out_31 : { valid : UInt<1>, bits : UInt<1>} @[Valid.scala 112:21]
    out_31.valid <= outPipe_valid_31 @[Valid.scala 113:17]
    out_31.bits <= outPipe_bits_31 @[Valid.scala 114:16]
    mesh_1_1.io.in_control[1].propagate <= out_31.bits @[Mesh.scala 83:31]
    reg r_8 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_8) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_8[0] <= io.in_valid[0][0] @[Reg.scala 16:23]
      r_8[1] <= io.in_valid[0][1] @[Reg.scala 16:23]
    reg r_9 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_9) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_9[0] <= r_8[0] @[Reg.scala 16:23]
      r_9[1] <= r_8[1] @[Reg.scala 16:23]
    mesh_0_0.io.in_valid[0] <= r_9[0] @[Mesh.scala 93:26]
    mesh_0_0.io.in_valid[1] <= r_9[1] @[Mesh.scala 93:26]
    reg r_10 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_10) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_10[0] <= mesh_0_0.io.out_valid[0] @[Reg.scala 16:23]
      r_10[1] <= mesh_0_0.io.out_valid[1] @[Reg.scala 16:23]
    reg r_11 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_11) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_11[0] <= r_10[0] @[Reg.scala 16:23]
      r_11[1] <= r_10[1] @[Reg.scala 16:23]
    mesh_1_0.io.in_valid[0] <= r_11[0] @[Mesh.scala 93:26]
    mesh_1_0.io.in_valid[1] <= r_11[1] @[Mesh.scala 93:26]
    reg r_12 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_12) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_12[0] <= io.in_valid[1][0] @[Reg.scala 16:23]
      r_12[1] <= io.in_valid[1][1] @[Reg.scala 16:23]
    reg r_13 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_13) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_13[0] <= r_12[0] @[Reg.scala 16:23]
      r_13[1] <= r_12[1] @[Reg.scala 16:23]
    mesh_0_1.io.in_valid[0] <= r_13[0] @[Mesh.scala 93:26]
    mesh_0_1.io.in_valid[1] <= r_13[1] @[Mesh.scala 93:26]
    reg r_14 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_14) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_14[0] <= mesh_0_1.io.out_valid[0] @[Reg.scala 16:23]
      r_14[1] <= mesh_0_1.io.out_valid[1] @[Reg.scala 16:23]
    reg r_15 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_15) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_15[0] <= r_14[0] @[Reg.scala 16:23]
      r_15[1] <= r_14[1] @[Reg.scala 16:23]
    mesh_1_1.io.in_valid[0] <= r_15[0] @[Mesh.scala 93:26]
    mesh_1_1.io.in_valid[1] <= r_15[1] @[Mesh.scala 93:26]
    reg r_16 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_16) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_16[0] <= io.in_id[0][0] @[Reg.scala 16:23]
      r_16[1] <= io.in_id[0][1] @[Reg.scala 16:23]
    reg r_17 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_17) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_17[0] <= r_16[0] @[Reg.scala 16:23]
      r_17[1] <= r_16[1] @[Reg.scala 16:23]
    mesh_0_0.io.in_id[0] <= r_17[0] @[Mesh.scala 102:23]
    mesh_0_0.io.in_id[1] <= r_17[1] @[Mesh.scala 102:23]
    reg r_18 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_18) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_18[0] <= mesh_0_0.io.out_id[0] @[Reg.scala 16:23]
      r_18[1] <= mesh_0_0.io.out_id[1] @[Reg.scala 16:23]
    reg r_19 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_19) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_19[0] <= r_18[0] @[Reg.scala 16:23]
      r_19[1] <= r_18[1] @[Reg.scala 16:23]
    mesh_1_0.io.in_id[0] <= r_19[0] @[Mesh.scala 102:23]
    mesh_1_0.io.in_id[1] <= r_19[1] @[Mesh.scala 102:23]
    reg r_20 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_20) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_20[0] <= io.in_id[1][0] @[Reg.scala 16:23]
      r_20[1] <= io.in_id[1][1] @[Reg.scala 16:23]
    reg r_21 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_21) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_21[0] <= r_20[0] @[Reg.scala 16:23]
      r_21[1] <= r_20[1] @[Reg.scala 16:23]
    mesh_0_1.io.in_id[0] <= r_21[0] @[Mesh.scala 102:23]
    mesh_0_1.io.in_id[1] <= r_21[1] @[Mesh.scala 102:23]
    reg r_22 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_22) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_22[0] <= mesh_0_1.io.out_id[0] @[Reg.scala 16:23]
      r_22[1] <= mesh_0_1.io.out_id[1] @[Reg.scala 16:23]
    reg r_23 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_23) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_23[0] <= r_22[0] @[Reg.scala 16:23]
      r_23[1] <= r_22[1] @[Reg.scala 16:23]
    mesh_1_1.io.in_id[0] <= r_23[0] @[Mesh.scala 102:23]
    mesh_1_1.io.in_id[1] <= r_23[1] @[Mesh.scala 102:23]
    reg r_24 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_24) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_24[0] <= io.in_last[0][0] @[Reg.scala 16:23]
      r_24[1] <= io.in_last[0][1] @[Reg.scala 16:23]
    reg r_25 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_25) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_25[0] <= r_24[0] @[Reg.scala 16:23]
      r_25[1] <= r_24[1] @[Reg.scala 16:23]
    mesh_0_0.io.in_last[0] <= r_25[0] @[Mesh.scala 111:25]
    mesh_0_0.io.in_last[1] <= r_25[1] @[Mesh.scala 111:25]
    reg r_26 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_26) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_26[0] <= mesh_0_0.io.out_last[0] @[Reg.scala 16:23]
      r_26[1] <= mesh_0_0.io.out_last[1] @[Reg.scala 16:23]
    reg r_27 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_27) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_27[0] <= r_26[0] @[Reg.scala 16:23]
      r_27[1] <= r_26[1] @[Reg.scala 16:23]
    mesh_1_0.io.in_last[0] <= r_27[0] @[Mesh.scala 111:25]
    mesh_1_0.io.in_last[1] <= r_27[1] @[Mesh.scala 111:25]
    reg r_28 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_28) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_28[0] <= io.in_last[1][0] @[Reg.scala 16:23]
      r_28[1] <= io.in_last[1][1] @[Reg.scala 16:23]
    reg r_29 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_29) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_29[0] <= r_28[0] @[Reg.scala 16:23]
      r_29[1] <= r_28[1] @[Reg.scala 16:23]
    mesh_0_1.io.in_last[0] <= r_29[0] @[Mesh.scala 111:25]
    mesh_0_1.io.in_last[1] <= r_29[1] @[Mesh.scala 111:25]
    reg r_30 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_30) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_30[0] <= mesh_0_1.io.out_last[0] @[Reg.scala 16:23]
      r_30[1] <= mesh_0_1.io.out_last[1] @[Reg.scala 16:23]
    reg r_31 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_31) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_31[0] <= r_30[0] @[Reg.scala 16:23]
      r_31[1] <= r_30[1] @[Reg.scala 16:23]
    mesh_1_1.io.in_last[0] <= r_31[0] @[Mesh.scala 111:25]
    mesh_1_1.io.in_last[1] <= r_31[1] @[Mesh.scala 111:25]
    reg r_32 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_32) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_32[0] <= mesh_1_0.io.out_b[0] @[Reg.scala 16:23]
      r_32[1] <= mesh_1_0.io.out_b[1] @[Reg.scala 16:23]
    io.out_b[0][0] <= r_32[0] @[Mesh.scala 121:7]
    io.out_b[0][1] <= r_32[1] @[Mesh.scala 121:7]
    reg r_33 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_33) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_33[0] <= mesh_1_0.io.out_c[0] @[Reg.scala 16:23]
      r_33[1] <= mesh_1_0.io.out_c[1] @[Reg.scala 16:23]
    io.out_c[0][0] <= r_33[0] @[Mesh.scala 122:7]
    io.out_c[0][1] <= r_33[1] @[Mesh.scala 122:7]
    reg r_34 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_34) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_34[0] <= mesh_1_0.io.out_valid[0] @[Reg.scala 16:23]
      r_34[1] <= mesh_1_0.io.out_valid[1] @[Reg.scala 16:23]
    io.out_valid[0][0] <= r_34[0] @[Mesh.scala 123:7]
    io.out_valid[0][1] <= r_34[1] @[Mesh.scala 123:7]
    reg r_35 : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}[2], clock with :
      reset => (UInt<1>("h0"), r_35) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_35[0].shift <= mesh_1_0.io.out_control[0].shift @[Reg.scala 16:23]
      r_35[0].propagate <= mesh_1_0.io.out_control[0].propagate @[Reg.scala 16:23]
      r_35[0].dataflow <= mesh_1_0.io.out_control[0].dataflow @[Reg.scala 16:23]
      r_35[1].shift <= mesh_1_0.io.out_control[1].shift @[Reg.scala 16:23]
      r_35[1].propagate <= mesh_1_0.io.out_control[1].propagate @[Reg.scala 16:23]
      r_35[1].dataflow <= mesh_1_0.io.out_control[1].dataflow @[Reg.scala 16:23]
    io.out_control[0][0].shift <= r_35[0].shift @[Mesh.scala 124:10]
    io.out_control[0][0].propagate <= r_35[0].propagate @[Mesh.scala 124:10]
    io.out_control[0][0].dataflow <= r_35[0].dataflow @[Mesh.scala 124:10]
    io.out_control[0][1].shift <= r_35[1].shift @[Mesh.scala 124:10]
    io.out_control[0][1].propagate <= r_35[1].propagate @[Mesh.scala 124:10]
    io.out_control[0][1].dataflow <= r_35[1].dataflow @[Mesh.scala 124:10]
    reg r_36 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_36) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_36[0] <= mesh_1_0.io.out_id[0] @[Reg.scala 16:23]
      r_36[1] <= mesh_1_0.io.out_id[1] @[Reg.scala 16:23]
    io.out_id[0][0] <= r_36[0] @[Mesh.scala 125:8]
    io.out_id[0][1] <= r_36[1] @[Mesh.scala 125:8]
    reg r_37 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_37) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_37[0] <= mesh_1_0.io.out_last[0] @[Reg.scala 16:23]
      r_37[1] <= mesh_1_0.io.out_last[1] @[Reg.scala 16:23]
    io.out_last[0][0] <= r_37[0] @[Mesh.scala 126:10]
    io.out_last[0][1] <= r_37[1] @[Mesh.scala 126:10]
    reg r_38 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_38) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_38[0] <= mesh_1_1.io.out_b[0] @[Reg.scala 16:23]
      r_38[1] <= mesh_1_1.io.out_b[1] @[Reg.scala 16:23]
    io.out_b[1][0] <= r_38[0] @[Mesh.scala 121:7]
    io.out_b[1][1] <= r_38[1] @[Mesh.scala 121:7]
    reg r_39 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_39) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_39[0] <= mesh_1_1.io.out_c[0] @[Reg.scala 16:23]
      r_39[1] <= mesh_1_1.io.out_c[1] @[Reg.scala 16:23]
    io.out_c[1][0] <= r_39[0] @[Mesh.scala 122:7]
    io.out_c[1][1] <= r_39[1] @[Mesh.scala 122:7]
    reg r_40 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_40) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_40[0] <= mesh_1_1.io.out_valid[0] @[Reg.scala 16:23]
      r_40[1] <= mesh_1_1.io.out_valid[1] @[Reg.scala 16:23]
    io.out_valid[1][0] <= r_40[0] @[Mesh.scala 123:7]
    io.out_valid[1][1] <= r_40[1] @[Mesh.scala 123:7]
    reg r_41 : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}[2], clock with :
      reset => (UInt<1>("h0"), r_41) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_41[0].shift <= mesh_1_1.io.out_control[0].shift @[Reg.scala 16:23]
      r_41[0].propagate <= mesh_1_1.io.out_control[0].propagate @[Reg.scala 16:23]
      r_41[0].dataflow <= mesh_1_1.io.out_control[0].dataflow @[Reg.scala 16:23]
      r_41[1].shift <= mesh_1_1.io.out_control[1].shift @[Reg.scala 16:23]
      r_41[1].propagate <= mesh_1_1.io.out_control[1].propagate @[Reg.scala 16:23]
      r_41[1].dataflow <= mesh_1_1.io.out_control[1].dataflow @[Reg.scala 16:23]
    io.out_control[1][0].shift <= r_41[0].shift @[Mesh.scala 124:10]
    io.out_control[1][0].propagate <= r_41[0].propagate @[Mesh.scala 124:10]
    io.out_control[1][0].dataflow <= r_41[0].dataflow @[Mesh.scala 124:10]
    io.out_control[1][1].shift <= r_41[1].shift @[Mesh.scala 124:10]
    io.out_control[1][1].propagate <= r_41[1].propagate @[Mesh.scala 124:10]
    io.out_control[1][1].dataflow <= r_41[1].dataflow @[Mesh.scala 124:10]
    reg r_42 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_42) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_42[0] <= mesh_1_1.io.out_id[0] @[Reg.scala 16:23]
      r_42[1] <= mesh_1_1.io.out_id[1] @[Reg.scala 16:23]
    io.out_id[1][0] <= r_42[0] @[Mesh.scala 125:8]
    io.out_id[1][1] <= r_42[1] @[Mesh.scala 125:8]
    reg r_43 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_43) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_43[0] <= mesh_1_1.io.out_last[0] @[Reg.scala 16:23]
      r_43[1] <= mesh_1_1.io.out_last[1] @[Reg.scala 16:23]
    io.out_last[1][0] <= r_43[0] @[Mesh.scala 126:10]
    io.out_last[1][1] <= r_43[1] @[Mesh.scala 126:10]

  module TagQueue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tag : UInt<32>, id : UInt<3>, total_rows : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tag : UInt<32>, id : UInt<3>, total_rows : UInt<3>}}, all : { tag : UInt<32>, id : UInt<3>, total_rows : UInt<3>}[6]}

    reg regs : { tag : UInt<32>, id : UInt<3>, total_rows : UInt<3>}[6], clock with :
      reset => (UInt<1>("h0"), regs) @[TagQueue.scala 18:17]
    reg raddr : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[TagQueue.scala 19:22]
    reg waddr : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[TagQueue.scala 20:22]
    reg len : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[TagQueue.scala 21:20]
    node empty = eq(len, UInt<1>("h0")) @[TagQueue.scala 23:19]
    node full = eq(len, UInt<3>("h6")) @[TagQueue.scala 24:18]
    node _T = eq(full, UInt<1>("h0")) @[TagQueue.scala 26:19]
    io.enq.ready <= _T @[TagQueue.scala 26:16]
    node _T_1 = eq(empty, UInt<1>("h0")) @[TagQueue.scala 27:19]
    io.deq.valid <= _T_1 @[TagQueue.scala 27:16]
    io.deq.bits.total_rows <= regs[raddr].total_rows @[TagQueue.scala 28:15]
    io.deq.bits.id <= regs[raddr].id @[TagQueue.scala 28:15]
    io.deq.bits.tag <= regs[raddr].tag @[TagQueue.scala 28:15]
    io.all[0].total_rows <= regs[0].total_rows @[TagQueue.scala 29:10]
    io.all[0].id <= regs[0].id @[TagQueue.scala 29:10]
    io.all[0].tag <= regs[0].tag @[TagQueue.scala 29:10]
    io.all[1].total_rows <= regs[1].total_rows @[TagQueue.scala 29:10]
    io.all[1].id <= regs[1].id @[TagQueue.scala 29:10]
    io.all[1].tag <= regs[1].tag @[TagQueue.scala 29:10]
    io.all[2].total_rows <= regs[2].total_rows @[TagQueue.scala 29:10]
    io.all[2].id <= regs[2].id @[TagQueue.scala 29:10]
    io.all[2].tag <= regs[2].tag @[TagQueue.scala 29:10]
    io.all[3].total_rows <= regs[3].total_rows @[TagQueue.scala 29:10]
    io.all[3].id <= regs[3].id @[TagQueue.scala 29:10]
    io.all[3].tag <= regs[3].tag @[TagQueue.scala 29:10]
    io.all[4].total_rows <= regs[4].total_rows @[TagQueue.scala 29:10]
    io.all[4].id <= regs[4].id @[TagQueue.scala 29:10]
    io.all[4].tag <= regs[4].tag @[TagQueue.scala 29:10]
    io.all[5].total_rows <= regs[5].total_rows @[TagQueue.scala 29:10]
    io.all[5].id <= regs[5].id @[TagQueue.scala 29:10]
    io.all[5].tag <= regs[5].tag @[TagQueue.scala 29:10]
    node _T_2 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    when _T_2 : @[TagQueue.scala 31:22]
      regs[waddr].total_rows <= io.enq.bits.total_rows @[TagQueue.scala 32:17]
      regs[waddr].id <= io.enq.bits.id @[TagQueue.scala 32:17]
      regs[waddr].tag <= io.enq.bits.tag @[TagQueue.scala 32:17]
      node _T_3 = leq(UInt<1>("h1"), UInt<3>("h5")) @[Util.scala 12:16]
      node _T_4 = asUInt(reset) @[Util.scala 12:13]
      node _T_5 = or(_T_3, _T_4) @[Util.scala 12:13]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[Util.scala 12:13]
      when _T_6 : @[Util.scala 12:13]
        printf(clock, UInt<1>("h1"), "Assertion failed: cannot wrapAdd when n is larger than max\n    at Util.scala:12 assert(n <= max.U, \"cannot wrapAdd when n is larger than max\")\n") @[Util.scala 12:13]
        stop(clock, UInt<1>("h1"), 1) @[Util.scala 12:13]
      node _T_7 = sub(UInt<3>("h5"), UInt<1>("h1")) @[Util.scala 13:22]
      node _T_8 = tail(_T_7, 1) @[Util.scala 13:22]
      node _T_9 = add(_T_8, UInt<1>("h1")) @[Util.scala 13:26]
      node _T_10 = tail(_T_9, 1) @[Util.scala 13:26]
      node _T_11 = geq(waddr, _T_10) @[Util.scala 13:13]
      node _T_12 = neq(UInt<1>("h1"), UInt<1>("h0")) @[Util.scala 13:37]
      node _T_13 = and(_T_11, _T_12) @[Util.scala 13:32]
      node _T_14 = sub(UInt<3>("h5"), waddr) @[Util.scala 13:57]
      node _T_15 = tail(_T_14, 1) @[Util.scala 13:57]
      node _T_16 = sub(UInt<1>("h1"), _T_15) @[Util.scala 13:48]
      node _T_17 = tail(_T_16, 1) @[Util.scala 13:48]
      node _T_18 = sub(_T_17, UInt<1>("h1")) @[Util.scala 13:62]
      node _T_19 = tail(_T_18, 1) @[Util.scala 13:62]
      node _T_20 = add(waddr, UInt<1>("h1")) @[Util.scala 13:71]
      node _T_21 = tail(_T_20, 1) @[Util.scala 13:71]
      node _T_22 = mux(_T_13, _T_19, _T_21) @[Util.scala 13:10]
      waddr <= _T_22 @[TagQueue.scala 33:11]
    node _T_23 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    when _T_23 : @[TagQueue.scala 36:22]
      regs[raddr].total_rows <= UInt<3>("h4") @[MeshWithDelays.scala 212:18]
      node _T_24 = leq(UInt<1>("h1"), UInt<3>("h5")) @[Util.scala 12:16]
      node _T_25 = asUInt(reset) @[Util.scala 12:13]
      node _T_26 = or(_T_24, _T_25) @[Util.scala 12:13]
      node _T_27 = eq(_T_26, UInt<1>("h0")) @[Util.scala 12:13]
      when _T_27 : @[Util.scala 12:13]
        printf(clock, UInt<1>("h1"), "Assertion failed: cannot wrapAdd when n is larger than max\n    at Util.scala:12 assert(n <= max.U, \"cannot wrapAdd when n is larger than max\")\n") @[Util.scala 12:13]
        stop(clock, UInt<1>("h1"), 1) @[Util.scala 12:13]
      node _T_28 = sub(UInt<3>("h5"), UInt<1>("h1")) @[Util.scala 13:22]
      node _T_29 = tail(_T_28, 1) @[Util.scala 13:22]
      node _T_30 = add(_T_29, UInt<1>("h1")) @[Util.scala 13:26]
      node _T_31 = tail(_T_30, 1) @[Util.scala 13:26]
      node _T_32 = geq(raddr, _T_31) @[Util.scala 13:13]
      node _T_33 = neq(UInt<1>("h1"), UInt<1>("h0")) @[Util.scala 13:37]
      node _T_34 = and(_T_32, _T_33) @[Util.scala 13:32]
      node _T_35 = sub(UInt<3>("h5"), raddr) @[Util.scala 13:57]
      node _T_36 = tail(_T_35, 1) @[Util.scala 13:57]
      node _T_37 = sub(UInt<1>("h1"), _T_36) @[Util.scala 13:48]
      node _T_38 = tail(_T_37, 1) @[Util.scala 13:48]
      node _T_39 = sub(_T_38, UInt<1>("h1")) @[Util.scala 13:62]
      node _T_40 = tail(_T_39, 1) @[Util.scala 13:62]
      node _T_41 = add(raddr, UInt<1>("h1")) @[Util.scala 13:71]
      node _T_42 = tail(_T_41, 1) @[Util.scala 13:71]
      node _T_43 = mux(_T_34, _T_40, _T_42) @[Util.scala 13:10]
      raddr <= _T_43 @[TagQueue.scala 38:11]
    node _T_44 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    node _T_45 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    node _T_46 = eq(_T_45, UInt<1>("h0")) @[TagQueue.scala 41:24]
    node _T_47 = and(_T_44, _T_46) @[TagQueue.scala 41:21]
    when _T_47 : @[TagQueue.scala 41:38]
      node _T_48 = add(len, UInt<1>("h1")) @[TagQueue.scala 42:16]
      node _T_49 = tail(_T_48, 1) @[TagQueue.scala 42:16]
      len <= _T_49 @[TagQueue.scala 42:9]
    else :
      node _T_50 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
      node _T_51 = eq(_T_50, UInt<1>("h0")) @[TagQueue.scala 43:14]
      node _T_52 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
      node _T_53 = and(_T_51, _T_52) @[TagQueue.scala 43:27]
      when _T_53 : @[TagQueue.scala 43:43]
        node _T_54 = sub(len, UInt<1>("h1")) @[TagQueue.scala 44:16]
        node _T_55 = tail(_T_54, 1) @[TagQueue.scala 44:16]
        len <= _T_55 @[TagQueue.scala 44:9]
    node _T_56 = asUInt(reset) @[TagQueue.scala 47:21]
    when _T_56 : @[TagQueue.scala 47:25]
      regs[0].total_rows <= UInt<3>("h4") @[MeshWithDelays.scala 212:18]
      regs[1].total_rows <= UInt<3>("h4") @[MeshWithDelays.scala 212:18]
      regs[2].total_rows <= UInt<3>("h4") @[MeshWithDelays.scala 212:18]
      regs[3].total_rows <= UInt<3>("h4") @[MeshWithDelays.scala 212:18]
      regs[4].total_rows <= UInt<3>("h4") @[MeshWithDelays.scala 212:18]
      regs[5].total_rows <= UInt<3>("h4") @[MeshWithDelays.scala 212:18]
    node _T_57 = leq(len, UInt<3>("h6")) @[TagQueue.scala 51:14]
    node _T_58 = asUInt(reset) @[TagQueue.scala 51:9]
    node _T_59 = or(_T_57, _T_58) @[TagQueue.scala 51:9]
    node _T_60 = eq(_T_59, UInt<1>("h0")) @[TagQueue.scala 51:9]
    when _T_60 : @[TagQueue.scala 51:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at TagQueue.scala:51 assert(len <= entries.U)\n") @[TagQueue.scala 51:9]
      stop(clock, UInt<1>("h1"), 1) @[TagQueue.scala 51:9]

  module Queue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tag : UInt<32>, id : UInt<3>, total_rows : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tag : UInt<32>, id : UInt<3>, total_rows : UInt<3>}}, count : UInt<3>}

    cmem ram : { tag : UInt<32>, id : UInt<3>, total_rows : UInt<3>} [6] @[Decoupled.scala 218:16]
    reg enq_ptr_value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    reg deq_ptr_value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 230:8]
      MPORT.total_rows <= io.enq.bits.total_rows @[Decoupled.scala 230:24]
      MPORT.id <= io.enq.bits.id @[Decoupled.scala 230:24]
      MPORT.tag <= io.enq.bits.tag @[Decoupled.scala 230:24]
      node wrap = eq(enq_ptr_value, UInt<3>("h5")) @[Counter.scala 72:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 76:15]
      when wrap : @[Counter.scala 86:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 86:28]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(deq_ptr_value, UInt<3>("h5")) @[Counter.scala 72:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 76:15]
      when wrap_1 : @[Counter.scala 86:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 86:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 242:21]
    io.deq.bits.total_rows <= io_deq_bits_MPORT.total_rows @[Decoupled.scala 242:15]
    io.deq.bits.id <= io_deq_bits_MPORT.id @[Decoupled.scala 242:15]
    io.deq.bits.tag <= io_deq_bits_MPORT.tag @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = mux(maybe_full, UInt<3>("h6"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 264:39]
    node _io_count_T_2 = add(UInt<3>("h6"), ptr_diff) @[Decoupled.scala 265:38]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 265:38]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 264:24]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 261:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 261:14]

  module MeshWithDelays :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip a : { flip ready : UInt<1>, valid : UInt<1>, bits : SInt<8>[2][2]}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : SInt<8>[2][2]}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : SInt<8>[2][2]}, flip req : { flip ready : UInt<1>, valid : UInt<1>, bits : { pe_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, a_transpose : UInt<1>, bd_transpose : UInt<1>, total_rows : UInt<3>, tag : UInt<32>, flush : UInt<2>}}, resp : { valid : UInt<1>, bits : { data : SInt<8>[2][2], total_rows : UInt<3>, tag : UInt<32>, last : UInt<1>}}, tags_in_progress : UInt<32>[6]}

    reg req : { t : { pe_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, a_transpose : UInt<1>, bd_transpose : UInt<1>, total_rows : UInt<3>, tag : UInt<32>, flush : UInt<2>}, valid : UInt<1>, bits : { pe_control : { dataflow : UInt<1>, propagate : UInt<1>, shift : UInt<4>}, a_transpose : UInt<1>, bd_transpose : UInt<1>, total_rows : UInt<3>, tag : UInt<32>, flush : UInt<2>}}, clock with :
      reset => (UInt<1>("h0"), req) @[MeshWithDelays.scala 92:16]
    reg matmul_id : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[MeshWithDelays.scala 94:26]
    reg fire_counter : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[MeshWithDelays.scala 97:29]
    node _T = and(io.a.ready, io.a.valid) @[Decoupled.scala 40:37]
    reg a_buf : SInt<8>[2][2], clock with :
      reset => (UInt<1>("h0"), a_buf) @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      a_buf[0][0] <= io.a.bits[0][0] @[Reg.scala 16:23]
      a_buf[0][1] <= io.a.bits[0][1] @[Reg.scala 16:23]
      a_buf[1][0] <= io.a.bits[1][0] @[Reg.scala 16:23]
      a_buf[1][1] <= io.a.bits[1][1] @[Reg.scala 16:23]
    node _T_1 = and(io.b.ready, io.b.valid) @[Decoupled.scala 40:37]
    reg b_buf : SInt<8>[2][2], clock with :
      reset => (UInt<1>("h0"), b_buf) @[Reg.scala 15:16]
    when _T_1 : @[Reg.scala 16:19]
      b_buf[0][0] <= io.b.bits[0][0] @[Reg.scala 16:23]
      b_buf[0][1] <= io.b.bits[0][1] @[Reg.scala 16:23]
      b_buf[1][0] <= io.b.bits[1][0] @[Reg.scala 16:23]
      b_buf[1][1] <= io.b.bits[1][1] @[Reg.scala 16:23]
    node _T_2 = and(io.d.ready, io.d.valid) @[Decoupled.scala 40:37]
    reg d_buf : SInt<8>[2][2], clock with :
      reset => (UInt<1>("h0"), d_buf) @[Reg.scala 15:16]
    when _T_2 : @[Reg.scala 16:19]
      d_buf[0][0] <= io.d.bits[0][0] @[Reg.scala 16:23]
      d_buf[0][1] <= io.d.bits[0][1] @[Reg.scala 16:23]
      d_buf[1][0] <= io.d.bits[1][0] @[Reg.scala 16:23]
      d_buf[1][1] <= io.d.bits[1][1] @[Reg.scala 16:23]
    reg a_written : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[MeshWithDelays.scala 103:26]
    reg b_written : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[MeshWithDelays.scala 104:26]
    reg d_written : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[MeshWithDelays.scala 105:26]
    reg in_prop : UInt<1>, clock with :
      reset => (UInt<1>("h0"), in_prop) @[MeshWithDelays.scala 107:20]
    node _T_3 = and(a_written, b_written) @[MeshWithDelays.scala 109:68]
    node _T_4 = and(_T_3, d_written) @[MeshWithDelays.scala 109:81]
    node _T_5 = gt(req.bits.flush, UInt<1>("h0")) @[MeshWithDelays.scala 109:113]
    node _T_6 = or(_T_4, _T_5) @[MeshWithDelays.scala 109:95]
    node input_next_row_into_spatial_array = and(req.valid, _T_6) @[MeshWithDelays.scala 109:53]
    node _T_7 = sub(req.bits.total_rows, UInt<1>("h1")) @[MeshWithDelays.scala 111:48]
    node _T_8 = tail(_T_7, 1) @[MeshWithDelays.scala 111:48]
    node _T_9 = eq(fire_counter, _T_8) @[MeshWithDelays.scala 111:32]
    node last_fire = and(_T_9, input_next_row_into_spatial_array) @[MeshWithDelays.scala 111:54]
    node _T_10 = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    when _T_10 : @[MeshWithDelays.scala 113:22]
      req.valid <= UInt<1>("h1") @[Util.scala 134:13]
      req.bits.flush <= io.req.bits.flush @[Util.scala 135:12]
      req.bits.tag <= io.req.bits.tag @[Util.scala 135:12]
      req.bits.total_rows <= io.req.bits.total_rows @[Util.scala 135:12]
      req.bits.bd_transpose <= io.req.bits.bd_transpose @[Util.scala 135:12]
      req.bits.a_transpose <= io.req.bits.a_transpose @[Util.scala 135:12]
      req.bits.pe_control.shift <= io.req.bits.pe_control.shift @[Util.scala 135:12]
      req.bits.pe_control.propagate <= io.req.bits.pe_control.propagate @[Util.scala 135:12]
      req.bits.pe_control.dataflow <= io.req.bits.pe_control.dataflow @[Util.scala 135:12]
      node _T_11 = xor(io.req.bits.pe_control.propagate, in_prop) @[MeshWithDelays.scala 115:49]
      in_prop <= _T_11 @[MeshWithDelays.scala 115:13]
      node _T_12 = leq(UInt<1>("h1"), UInt<3>("h4")) @[Util.scala 12:16]
      node _T_13 = bits(reset, 0, 0) @[Util.scala 12:13]
      node _T_14 = or(_T_12, _T_13) @[Util.scala 12:13]
      node _T_15 = eq(_T_14, UInt<1>("h0")) @[Util.scala 12:13]
      when _T_15 : @[Util.scala 12:13]
        printf(clock, UInt<1>("h1"), "Assertion failed: cannot wrapAdd when n is larger than max\n    at Util.scala:12 assert(n <= max.U, \"cannot wrapAdd when n is larger than max\")\n") @[Util.scala 12:13]
        stop(clock, UInt<1>("h1"), 1) @[Util.scala 12:13]
      node _T_16 = sub(UInt<3>("h4"), UInt<1>("h1")) @[Util.scala 13:22]
      node _T_17 = tail(_T_16, 1) @[Util.scala 13:22]
      node _T_18 = add(_T_17, UInt<1>("h1")) @[Util.scala 13:26]
      node _T_19 = tail(_T_18, 1) @[Util.scala 13:26]
      node _T_20 = geq(matmul_id, _T_19) @[Util.scala 13:13]
      node _T_21 = neq(UInt<1>("h1"), UInt<1>("h0")) @[Util.scala 13:37]
      node _T_22 = and(_T_20, _T_21) @[Util.scala 13:32]
      node _T_23 = sub(UInt<3>("h4"), matmul_id) @[Util.scala 13:57]
      node _T_24 = tail(_T_23, 1) @[Util.scala 13:57]
      node _T_25 = sub(UInt<1>("h1"), _T_24) @[Util.scala 13:48]
      node _T_26 = tail(_T_25, 1) @[Util.scala 13:48]
      node _T_27 = sub(_T_26, UInt<1>("h1")) @[Util.scala 13:62]
      node _T_28 = tail(_T_27, 1) @[Util.scala 13:62]
      node _T_29 = add(matmul_id, UInt<1>("h1")) @[Util.scala 13:71]
      node _T_30 = tail(_T_29, 1) @[Util.scala 13:71]
      node _T_31 = mux(_T_22, _T_28, _T_30) @[Util.scala 13:10]
      matmul_id <= _T_31 @[MeshWithDelays.scala 116:15]
    else :
      when last_fire : @[MeshWithDelays.scala 117:26]
        node _T_32 = gt(req.bits.flush, UInt<1>("h1")) @[MeshWithDelays.scala 118:33]
        req.valid <= _T_32 @[MeshWithDelays.scala 118:15]
        node _T_33 = sub(req.bits.flush, UInt<1>("h1")) @[MeshWithDelays.scala 119:38]
        node _T_34 = tail(_T_33, 1) @[MeshWithDelays.scala 119:38]
        req.bits.flush <= _T_34 @[MeshWithDelays.scala 119:20]
    when input_next_row_into_spatial_array : @[MeshWithDelays.scala 122:44]
      a_written <= UInt<1>("h0") @[MeshWithDelays.scala 123:15]
      b_written <= UInt<1>("h0") @[MeshWithDelays.scala 124:15]
      d_written <= UInt<1>("h0") @[MeshWithDelays.scala 125:15]
      node _T_35 = sub(req.bits.total_rows, UInt<1>("h1")) @[Util.scala 18:28]
      node _T_36 = tail(_T_35, 1) @[Util.scala 18:28]
      node _T_37 = leq(UInt<1>("h1"), _T_36) @[Util.scala 19:14]
      node _T_38 = eq(_T_36, UInt<1>("h0")) @[Util.scala 19:28]
      node _T_39 = or(_T_37, _T_38) @[Util.scala 19:21]
      node _T_40 = bits(reset, 0, 0) @[Util.scala 19:11]
      node _T_41 = or(_T_39, _T_40) @[Util.scala 19:11]
      node _T_42 = eq(_T_41, UInt<1>("h0")) @[Util.scala 19:11]
      when _T_42 : @[Util.scala 19:11]
        printf(clock, UInt<1>("h1"), "Assertion failed: cannot wrapAdd when n is larger than max, unless max is 0\n    at Util.scala:19 assert(n <= max || max === 0.U, \"cannot wrapAdd when n is larger than max, unless max is 0\")\n") @[Util.scala 19:11]
        stop(clock, UInt<1>("h1"), 1) @[Util.scala 19:11]
      node _T_43 = add(fire_counter, UInt<1>("h1")) @[Util.scala 27:15]
      node _T_44 = tail(_T_43, 1) @[Util.scala 27:15]
      node _T_45 = eq(UInt<1>("h1"), UInt<1>("h0")) @[Util.scala 28:8]
      node _T_46 = eq(_T_36, UInt<1>("h0")) @[Util.scala 29:12]
      node _T_47 = sub(_T_36, UInt<1>("h1")) @[Util.scala 30:17]
      node _T_48 = tail(_T_47, 1) @[Util.scala 30:17]
      node _T_49 = add(_T_48, UInt<1>("h1")) @[Util.scala 30:21]
      node _T_50 = tail(_T_49, 1) @[Util.scala 30:21]
      node _T_51 = geq(fire_counter, _T_50) @[Util.scala 30:10]
      node _T_52 = neq(UInt<1>("h1"), UInt<1>("h0")) @[Util.scala 30:32]
      node _T_53 = and(_T_51, _T_52) @[Util.scala 30:27]
      node _T_54 = sub(_T_36, fire_counter) @[Util.scala 30:54]
      node _T_55 = tail(_T_54, 1) @[Util.scala 30:54]
      node _T_56 = sub(UInt<1>("h1"), _T_55) @[Util.scala 30:47]
      node _T_57 = tail(_T_56, 1) @[Util.scala 30:47]
      node _T_58 = sub(_T_57, UInt<1>("h1")) @[Util.scala 30:59]
      node _T_59 = tail(_T_58, 1) @[Util.scala 30:59]
      node _T_60 = mux(_T_53, _T_59, _T_44) @[Mux.scala 98:16]
      node _T_61 = mux(_T_46, UInt<1>("h0"), _T_60) @[Mux.scala 98:16]
      node _T_62 = mux(_T_45, fire_counter, _T_61) @[Mux.scala 98:16]
      fire_counter <= _T_62 @[MeshWithDelays.scala 127:18]
    node _T_63 = and(io.a.ready, io.a.valid) @[Decoupled.scala 40:37]
    when _T_63 : @[MeshWithDelays.scala 130:20]
      a_written <= UInt<1>("h1") @[MeshWithDelays.scala 131:15]
    node _T_64 = and(io.b.ready, io.b.valid) @[Decoupled.scala 40:37]
    when _T_64 : @[MeshWithDelays.scala 134:20]
      b_written <= UInt<1>("h1") @[MeshWithDelays.scala 135:15]
    node _T_65 = and(io.d.ready, io.d.valid) @[Decoupled.scala 40:37]
    when _T_65 : @[MeshWithDelays.scala 138:20]
      d_written <= UInt<1>("h1") @[MeshWithDelays.scala 139:15]
    node _T_66 = eq(a_written, UInt<1>("h0")) @[MeshWithDelays.scala 142:17]
    node _T_67 = or(_T_66, input_next_row_into_spatial_array) @[MeshWithDelays.scala 142:28]
    node _T_68 = or(_T_67, io.req.ready) @[MeshWithDelays.scala 142:65]
    io.a.ready <= _T_68 @[MeshWithDelays.scala 142:14]
    node _T_69 = eq(b_written, UInt<1>("h0")) @[MeshWithDelays.scala 143:17]
    node _T_70 = or(_T_69, input_next_row_into_spatial_array) @[MeshWithDelays.scala 143:28]
    node _T_71 = or(_T_70, io.req.ready) @[MeshWithDelays.scala 143:65]
    io.b.ready <= _T_71 @[MeshWithDelays.scala 143:14]
    node _T_72 = eq(d_written, UInt<1>("h0")) @[MeshWithDelays.scala 144:17]
    node _T_73 = or(_T_72, input_next_row_into_spatial_array) @[MeshWithDelays.scala 144:28]
    node _T_74 = or(_T_73, io.req.ready) @[MeshWithDelays.scala 144:65]
    io.d.ready <= _T_74 @[MeshWithDelays.scala 144:14]
    node _T_75 = eq(input_next_row_into_spatial_array, UInt<1>("h0")) @[MeshWithDelays.scala 146:23]
    node _T_76 = or(req.valid, _T_75) @[MeshWithDelays.scala 146:20]
    node _T_77 = bits(reset, 0, 0) @[MeshWithDelays.scala 146:9]
    node _T_78 = or(_T_76, _T_77) @[MeshWithDelays.scala 146:9]
    node _T_79 = eq(_T_78, UInt<1>("h0")) @[MeshWithDelays.scala 146:9]
    when _T_79 : @[MeshWithDelays.scala 146:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at MeshWithDelays.scala:146 assert(req.valid || !input_next_row_into_spatial_array)\n") @[MeshWithDelays.scala 146:9]
      stop(clock, UInt<1>("h1"), 1) @[MeshWithDelays.scala 146:9]
    node _T_80 = eq(req.valid, UInt<1>("h0")) @[MeshWithDelays.scala 148:15]
    node _T_81 = eq(input_next_row_into_spatial_array, UInt<1>("h0")) @[MeshWithDelays.scala 148:29]
    node pause = or(_T_80, _T_81) @[MeshWithDelays.scala 148:26]
    node _T_82 = eq(req.bits.pe_control.dataflow, UInt<1>("h0")) @[MeshWithDelays.scala 151:63]
    node _T_83 = eq(req.bits.a_transpose, UInt<1>("h0")) @[MeshWithDelays.scala 151:85]
    node a_is_from_transposer = mux(_T_82, _T_83, req.bits.a_transpose) @[MeshWithDelays.scala 151:33]
    node _T_84 = eq(req.bits.pe_control.dataflow, UInt<1>("h0")) @[MeshWithDelays.scala 152:59]
    node b_is_from_transposer = and(_T_84, req.bits.bd_transpose) @[MeshWithDelays.scala 152:80]
    node _T_85 = eq(req.bits.pe_control.dataflow, UInt<1>("h1")) @[MeshWithDelays.scala 153:59]
    node d_is_from_transposer = and(_T_85, req.bits.bd_transpose) @[MeshWithDelays.scala 153:80]
    inst transposer of AlwaysOutTransposer @[MeshWithDelays.scala 154:26]
    transposer.clock <= clock
    transposer.reset <= reset
    node _T_86 = eq(pause, UInt<1>("h0")) @[MeshWithDelays.scala 156:32]
    node _T_87 = or(a_is_from_transposer, b_is_from_transposer) @[MeshWithDelays.scala 156:64]
    node _T_88 = or(_T_87, d_is_from_transposer) @[MeshWithDelays.scala 156:88]
    node _T_89 = and(_T_86, _T_88) @[MeshWithDelays.scala 156:39]
    transposer.io.inRow.valid <= _T_89 @[MeshWithDelays.scala 156:29]
    wire _WIRE : SInt<8>[4] @[MeshWithDelays.scala 157:46]
    _WIRE[0] <= a_buf[0][0] @[MeshWithDelays.scala 157:46]
    _WIRE[1] <= a_buf[0][1] @[MeshWithDelays.scala 157:46]
    _WIRE[2] <= a_buf[1][0] @[MeshWithDelays.scala 157:46]
    _WIRE[3] <= a_buf[1][1] @[MeshWithDelays.scala 157:46]
    wire _WIRE_1 : SInt<8>[4] @[MeshWithDelays.scala 158:36]
    _WIRE_1[0] <= b_buf[0][0] @[MeshWithDelays.scala 158:36]
    _WIRE_1[1] <= b_buf[0][1] @[MeshWithDelays.scala 158:36]
    _WIRE_1[2] <= b_buf[1][0] @[MeshWithDelays.scala 158:36]
    _WIRE_1[3] <= b_buf[1][1] @[MeshWithDelays.scala 158:36]
    wire _WIRE_2 : SInt<8>[4] @[MeshWithDelays.scala 159:36]
    _WIRE_2[0] <= d_buf[1][1] @[MeshWithDelays.scala 159:36]
    _WIRE_2[1] <= d_buf[1][0] @[MeshWithDelays.scala 159:36]
    _WIRE_2[2] <= d_buf[0][1] @[MeshWithDelays.scala 159:36]
    _WIRE_2[3] <= d_buf[0][0] @[MeshWithDelays.scala 159:36]
    node _T_90 = mux(d_is_from_transposer, _WIRE_2, _WIRE) @[Mux.scala 98:16]
    node _T_91 = mux(b_is_from_transposer, _WIRE_1, _T_90) @[Mux.scala 98:16]
    transposer.io.inRow.bits[0] <= _T_91[0] @[MeshWithDelays.scala 157:28]
    transposer.io.inRow.bits[1] <= _T_91[1] @[MeshWithDelays.scala 157:28]
    transposer.io.inRow.bits[2] <= _T_91[2] @[MeshWithDelays.scala 157:28]
    transposer.io.inRow.bits[3] <= _T_91[3] @[MeshWithDelays.scala 157:28]
    transposer.io.outCol.ready <= UInt<1>("h1") @[MeshWithDelays.scala 162:30]
    wire _WIRE_3 : SInt<8>[2] @[MeshWithDelays.scala 163:92]
    _WIRE_3[0] <= transposer.io.outCol.bits[0] @[MeshWithDelays.scala 163:92]
    _WIRE_3[1] <= transposer.io.outCol.bits[1] @[MeshWithDelays.scala 163:92]
    wire _WIRE_4 : SInt<8>[2] @[MeshWithDelays.scala 163:92]
    _WIRE_4[0] <= transposer.io.outCol.bits[2] @[MeshWithDelays.scala 163:92]
    _WIRE_4[1] <= transposer.io.outCol.bits[3] @[MeshWithDelays.scala 163:92]
    wire transposer_out : SInt<8>[2][2] @[MeshWithDelays.scala 163:31]
    transposer_out[0][0] <= _WIRE_3[0] @[MeshWithDelays.scala 163:31]
    transposer_out[0][1] <= _WIRE_3[1] @[MeshWithDelays.scala 163:31]
    transposer_out[1][0] <= _WIRE_4[0] @[MeshWithDelays.scala 163:31]
    transposer_out[1][1] <= _WIRE_4[1] @[MeshWithDelays.scala 163:31]
    inst mesh of Mesh @[MeshWithDelays.scala 166:20]
    mesh.clock <= clock
    mesh.reset <= reset
    wire _WIRE_5 : SInt<8>[2][2] @[MeshWithDelays.scala 169:80]
    node _T_92 = asUInt(transposer_out[0][0]) @[MeshWithDelays.scala 169:80]
    node _T_93 = asUInt(transposer_out[0][1]) @[MeshWithDelays.scala 169:80]
    node _T_94 = asUInt(transposer_out[1][0]) @[MeshWithDelays.scala 169:80]
    node _T_95 = asUInt(transposer_out[1][1]) @[MeshWithDelays.scala 169:80]
    node lo = cat(_T_93, _T_92) @[MeshWithDelays.scala 169:80]
    node hi = cat(_T_95, _T_94) @[MeshWithDelays.scala 169:80]
    node _T_96 = cat(hi, lo) @[MeshWithDelays.scala 169:80]
    wire _WIRE_6 : UInt<32>
    _WIRE_6 <= _T_96
    node _T_97 = bits(_WIRE_6, 7, 0) @[MeshWithDelays.scala 169:80]
    node _T_98 = asSInt(_T_97) @[MeshWithDelays.scala 169:80]
    _WIRE_5[0][0] <= _T_98 @[MeshWithDelays.scala 169:80]
    node _T_99 = bits(_WIRE_6, 15, 8) @[MeshWithDelays.scala 169:80]
    node _T_100 = asSInt(_T_99) @[MeshWithDelays.scala 169:80]
    _WIRE_5[0][1] <= _T_100 @[MeshWithDelays.scala 169:80]
    node _T_101 = bits(_WIRE_6, 23, 16) @[MeshWithDelays.scala 169:80]
    node _T_102 = asSInt(_T_101) @[MeshWithDelays.scala 169:80]
    _WIRE_5[1][0] <= _T_102 @[MeshWithDelays.scala 169:80]
    node _T_103 = bits(_WIRE_6, 31, 24) @[MeshWithDelays.scala 169:80]
    node _T_104 = asSInt(_T_103) @[MeshWithDelays.scala 169:80]
    _WIRE_5[1][1] <= _T_104 @[MeshWithDelays.scala 169:80]
    node _T_105 = mux(a_is_from_transposer, _WIRE_5, a_buf) @[MeshWithDelays.scala 169:34]
    wire a_shifter_in : SInt<8>[2][2]
    a_shifter_in[0][0] <= _T_105[0][0]
    a_shifter_in[0][1] <= _T_105[0][1]
    a_shifter_in[1][0] <= _T_105[1][0]
    a_shifter_in[1][1] <= _T_105[1][1]
    wire _WIRE_7 : SInt<8>[2][2] @[MeshWithDelays.scala 170:80]
    node _T_106 = asUInt(transposer_out[0][0]) @[MeshWithDelays.scala 170:80]
    node _T_107 = asUInt(transposer_out[0][1]) @[MeshWithDelays.scala 170:80]
    node _T_108 = asUInt(transposer_out[1][0]) @[MeshWithDelays.scala 170:80]
    node _T_109 = asUInt(transposer_out[1][1]) @[MeshWithDelays.scala 170:80]
    node lo_1 = cat(_T_107, _T_106) @[MeshWithDelays.scala 170:80]
    node hi_1 = cat(_T_109, _T_108) @[MeshWithDelays.scala 170:80]
    node _T_110 = cat(hi_1, lo_1) @[MeshWithDelays.scala 170:80]
    wire _WIRE_8 : UInt<32>
    _WIRE_8 <= _T_110
    node _T_111 = bits(_WIRE_8, 7, 0) @[MeshWithDelays.scala 170:80]
    node _T_112 = asSInt(_T_111) @[MeshWithDelays.scala 170:80]
    _WIRE_7[0][0] <= _T_112 @[MeshWithDelays.scala 170:80]
    node _T_113 = bits(_WIRE_8, 15, 8) @[MeshWithDelays.scala 170:80]
    node _T_114 = asSInt(_T_113) @[MeshWithDelays.scala 170:80]
    _WIRE_7[0][1] <= _T_114 @[MeshWithDelays.scala 170:80]
    node _T_115 = bits(_WIRE_8, 23, 16) @[MeshWithDelays.scala 170:80]
    node _T_116 = asSInt(_T_115) @[MeshWithDelays.scala 170:80]
    _WIRE_7[1][0] <= _T_116 @[MeshWithDelays.scala 170:80]
    node _T_117 = bits(_WIRE_8, 31, 24) @[MeshWithDelays.scala 170:80]
    node _T_118 = asSInt(_T_117) @[MeshWithDelays.scala 170:80]
    _WIRE_7[1][1] <= _T_118 @[MeshWithDelays.scala 170:80]
    node _T_119 = mux(b_is_from_transposer, _WIRE_7, b_buf) @[MeshWithDelays.scala 170:34]
    wire b_shifter_in : SInt<8>[2][2]
    b_shifter_in[0][0] <= _T_119[0][0]
    b_shifter_in[0][1] <= _T_119[0][1]
    b_shifter_in[1][0] <= _T_119[1][0]
    b_shifter_in[1][1] <= _T_119[1][1]
    wire _WIRE_9 : SInt<8>[2] @[MeshWithDelays.scala 172:73]
    _WIRE_9[0] <= transposer_out[1][1] @[MeshWithDelays.scala 172:73]
    _WIRE_9[1] <= transposer_out[1][0] @[MeshWithDelays.scala 172:73]
    wire _WIRE_10 : SInt<8>[2] @[MeshWithDelays.scala 172:73]
    _WIRE_10[0] <= transposer_out[0][1] @[MeshWithDelays.scala 172:73]
    _WIRE_10[1] <= transposer_out[0][0] @[MeshWithDelays.scala 172:73]
    wire _WIRE_11 : SInt<8>[2][2] @[MeshWithDelays.scala 172:12]
    _WIRE_11[0][0] <= _WIRE_9[0] @[MeshWithDelays.scala 172:12]
    _WIRE_11[0][1] <= _WIRE_9[1] @[MeshWithDelays.scala 172:12]
    _WIRE_11[1][0] <= _WIRE_10[0] @[MeshWithDelays.scala 172:12]
    _WIRE_11[1][1] <= _WIRE_10[1] @[MeshWithDelays.scala 172:12]
    wire _WIRE_12 : SInt<8>[2][2] @[MeshWithDelays.scala 172:93]
    node _T_120 = asUInt(_WIRE_11[0][0]) @[MeshWithDelays.scala 172:93]
    node _T_121 = asUInt(_WIRE_11[0][1]) @[MeshWithDelays.scala 172:93]
    node _T_122 = asUInt(_WIRE_11[1][0]) @[MeshWithDelays.scala 172:93]
    node _T_123 = asUInt(_WIRE_11[1][1]) @[MeshWithDelays.scala 172:93]
    node lo_2 = cat(_T_121, _T_120) @[MeshWithDelays.scala 172:93]
    node hi_2 = cat(_T_123, _T_122) @[MeshWithDelays.scala 172:93]
    node _T_124 = cat(hi_2, lo_2) @[MeshWithDelays.scala 172:93]
    wire _WIRE_13 : UInt<32>
    _WIRE_13 <= _T_124
    node _T_125 = bits(_WIRE_13, 7, 0) @[MeshWithDelays.scala 172:93]
    node _T_126 = asSInt(_T_125) @[MeshWithDelays.scala 172:93]
    _WIRE_12[0][0] <= _T_126 @[MeshWithDelays.scala 172:93]
    node _T_127 = bits(_WIRE_13, 15, 8) @[MeshWithDelays.scala 172:93]
    node _T_128 = asSInt(_T_127) @[MeshWithDelays.scala 172:93]
    _WIRE_12[0][1] <= _T_128 @[MeshWithDelays.scala 172:93]
    node _T_129 = bits(_WIRE_13, 23, 16) @[MeshWithDelays.scala 172:93]
    node _T_130 = asSInt(_T_129) @[MeshWithDelays.scala 172:93]
    _WIRE_12[1][0] <= _T_130 @[MeshWithDelays.scala 172:93]
    node _T_131 = bits(_WIRE_13, 31, 24) @[MeshWithDelays.scala 172:93]
    node _T_132 = asSInt(_T_131) @[MeshWithDelays.scala 172:93]
    _WIRE_12[1][1] <= _T_132 @[MeshWithDelays.scala 172:93]
    node _T_133 = mux(d_is_from_transposer, _WIRE_12, d_buf) @[MeshWithDelays.scala 171:34]
    wire d_shifter_in : SInt<8>[2][2]
    d_shifter_in[0][0] <= _T_133[0][0]
    d_shifter_in[0][1] <= _T_133[0][1]
    d_shifter_in[1][0] <= _T_133[1][0]
    d_shifter_in[1][1] <= _T_133[1][1]
    wire _WIRE_14 : SInt<8>[2][2] @[MeshWithDelays.scala 78:26]
    _WIRE_14[0][0] <= a_shifter_in[0][0] @[MeshWithDelays.scala 78:26]
    _WIRE_14[0][1] <= a_shifter_in[0][1] @[MeshWithDelays.scala 78:26]
    _WIRE_14[1][0] <= a_shifter_in[1][0] @[MeshWithDelays.scala 78:26]
    _WIRE_14[1][1] <= a_shifter_in[1][1] @[MeshWithDelays.scala 78:26]
    reg r : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r[0] <= _WIRE_14[1][0] @[Reg.scala 16:23]
      r[1] <= _WIRE_14[1][1] @[Reg.scala 16:23]
    reg r_1 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_1) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_1[0] <= r[0] @[Reg.scala 16:23]
      r_1[1] <= r[1] @[Reg.scala 16:23]
    mesh.io.in_a[0][0] <= _WIRE_14[0][0] @[MeshWithDelays.scala 174:16]
    mesh.io.in_a[0][1] <= _WIRE_14[0][1] @[MeshWithDelays.scala 174:16]
    mesh.io.in_a[1][0] <= r_1[0] @[MeshWithDelays.scala 174:16]
    mesh.io.in_a[1][1] <= r_1[1] @[MeshWithDelays.scala 174:16]
    wire _WIRE_15 : SInt<8>[2][2] @[MeshWithDelays.scala 78:26]
    _WIRE_15[0][0] <= b_shifter_in[0][0] @[MeshWithDelays.scala 78:26]
    _WIRE_15[0][1] <= b_shifter_in[0][1] @[MeshWithDelays.scala 78:26]
    _WIRE_15[1][0] <= b_shifter_in[1][0] @[MeshWithDelays.scala 78:26]
    _WIRE_15[1][1] <= b_shifter_in[1][1] @[MeshWithDelays.scala 78:26]
    reg r_2 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_2) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_2[0] <= _WIRE_15[1][0] @[Reg.scala 16:23]
      r_2[1] <= _WIRE_15[1][1] @[Reg.scala 16:23]
    reg r_3 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_3) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_3[0] <= r_2[0] @[Reg.scala 16:23]
      r_3[1] <= r_2[1] @[Reg.scala 16:23]
    mesh.io.in_b[0][0] <= _WIRE_15[0][0] @[MeshWithDelays.scala 175:16]
    mesh.io.in_b[0][1] <= _WIRE_15[0][1] @[MeshWithDelays.scala 175:16]
    mesh.io.in_b[1][0] <= r_3[0] @[MeshWithDelays.scala 175:16]
    mesh.io.in_b[1][1] <= r_3[1] @[MeshWithDelays.scala 175:16]
    wire _WIRE_16 : SInt<8>[2][2] @[MeshWithDelays.scala 78:26]
    _WIRE_16[0][0] <= d_shifter_in[0][0] @[MeshWithDelays.scala 78:26]
    _WIRE_16[0][1] <= d_shifter_in[0][1] @[MeshWithDelays.scala 78:26]
    _WIRE_16[1][0] <= d_shifter_in[1][0] @[MeshWithDelays.scala 78:26]
    _WIRE_16[1][1] <= d_shifter_in[1][1] @[MeshWithDelays.scala 78:26]
    reg r_4 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_4) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_4[0] <= _WIRE_16[1][0] @[Reg.scala 16:23]
      r_4[1] <= _WIRE_16[1][1] @[Reg.scala 16:23]
    reg r_5 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_5) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_5[0] <= r_4[0] @[Reg.scala 16:23]
      r_5[1] <= r_4[1] @[Reg.scala 16:23]
    mesh.io.in_d[0][0] <= _WIRE_16[0][0] @[MeshWithDelays.scala 176:16]
    mesh.io.in_d[0][1] <= _WIRE_16[0][1] @[MeshWithDelays.scala 176:16]
    mesh.io.in_d[1][0] <= r_5[0] @[MeshWithDelays.scala 176:16]
    mesh.io.in_d[1][1] <= r_5[1] @[MeshWithDelays.scala 176:16]
    mesh.io.in_control[0][0].dataflow <= req.bits.pe_control.dataflow @[MeshWithDelays.scala 179:27]
    mesh.io.in_control[0][1].dataflow <= req.bits.pe_control.dataflow @[MeshWithDelays.scala 179:27]
    mesh.io.in_control[0][0].propagate <= in_prop @[MeshWithDelays.scala 180:28]
    mesh.io.in_control[0][1].propagate <= in_prop @[MeshWithDelays.scala 180:28]
    reg r_6 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_6) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_6 <= req.bits.pe_control.dataflow @[Reg.scala 16:23]
    reg r_7 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_7) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_7 <= r_6 @[Reg.scala 16:23]
    mesh.io.in_control[1][0].dataflow <= r_7 @[MeshWithDelays.scala 179:27]
    reg r_8 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_8) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_8 <= req.bits.pe_control.dataflow @[Reg.scala 16:23]
    reg r_9 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_9) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_9 <= r_8 @[Reg.scala 16:23]
    mesh.io.in_control[1][1].dataflow <= r_9 @[MeshWithDelays.scala 179:27]
    reg r_10 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_10) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_10 <= in_prop @[Reg.scala 16:23]
    reg r_11 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_11) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_11 <= r_10 @[Reg.scala 16:23]
    mesh.io.in_control[1][0].propagate <= r_11 @[MeshWithDelays.scala 180:28]
    reg r_12 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_12) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_12 <= in_prop @[Reg.scala 16:23]
    reg r_13 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_13) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_13 <= r_12 @[Reg.scala 16:23]
    mesh.io.in_control[1][1].propagate <= r_13 @[MeshWithDelays.scala 180:28]
    reg result_shift : UInt, clock with :
      reset => (UInt<1>("h0"), result_shift) @[MeshWithDelays.scala 182:29]
    result_shift <= req.bits.pe_control.shift @[MeshWithDelays.scala 182:29]
    mesh.io.in_control[0][0].shift <= result_shift @[MeshWithDelays.scala 184:26]
    mesh.io.in_control[0][1].shift <= result_shift @[MeshWithDelays.scala 184:26]
    reg r_14 : UInt, clock with :
      reset => (UInt<1>("h0"), r_14) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_14 <= result_shift @[Reg.scala 16:23]
    reg r_15 : UInt, clock with :
      reset => (UInt<1>("h0"), r_15) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_15 <= r_14 @[Reg.scala 16:23]
    mesh.io.in_control[1][0].shift <= r_15 @[MeshWithDelays.scala 184:26]
    reg r_16 : UInt, clock with :
      reset => (UInt<1>("h0"), r_16) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_16 <= result_shift @[Reg.scala 16:23]
    reg r_17 : UInt, clock with :
      reset => (UInt<1>("h0"), r_17) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_17 <= r_16 @[Reg.scala 16:23]
    mesh.io.in_control[1][1].shift <= r_17 @[MeshWithDelays.scala 184:26]
    node _T_134 = eq(pause, UInt<1>("h0")) @[MeshWithDelays.scala 187:84]
    node _T_135 = eq(pause, UInt<1>("h0")) @[MeshWithDelays.scala 187:84]
    wire _WIRE_17 : UInt<1>[2] @[MeshWithDelays.scala 187:61]
    _WIRE_17[0] <= _T_134 @[MeshWithDelays.scala 187:61]
    _WIRE_17[1] <= _T_135 @[MeshWithDelays.scala 187:61]
    node _T_136 = eq(pause, UInt<1>("h0")) @[MeshWithDelays.scala 187:84]
    node _T_137 = eq(pause, UInt<1>("h0")) @[MeshWithDelays.scala 187:84]
    wire _WIRE_18 : UInt<1>[2] @[MeshWithDelays.scala 187:61]
    _WIRE_18[0] <= _T_136 @[MeshWithDelays.scala 187:61]
    _WIRE_18[1] <= _T_137 @[MeshWithDelays.scala 187:61]
    wire not_paused_vec : UInt<1>[2][2] @[MeshWithDelays.scala 187:31]
    not_paused_vec[0][0] <= _WIRE_17[0] @[MeshWithDelays.scala 187:31]
    not_paused_vec[0][1] <= _WIRE_17[1] @[MeshWithDelays.scala 187:31]
    not_paused_vec[1][0] <= _WIRE_18[0] @[MeshWithDelays.scala 187:31]
    not_paused_vec[1][1] <= _WIRE_18[1] @[MeshWithDelays.scala 187:31]
    wire _WIRE_19 : UInt<1>[2][2] @[MeshWithDelays.scala 78:26]
    _WIRE_19[0][0] <= not_paused_vec[0][0] @[MeshWithDelays.scala 78:26]
    _WIRE_19[0][1] <= not_paused_vec[0][1] @[MeshWithDelays.scala 78:26]
    _WIRE_19[1][0] <= not_paused_vec[1][0] @[MeshWithDelays.scala 78:26]
    _WIRE_19[1][1] <= not_paused_vec[1][1] @[MeshWithDelays.scala 78:26]
    reg r_18 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_18) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_18[0] <= _WIRE_19[1][0] @[Reg.scala 16:23]
      r_18[1] <= _WIRE_19[1][1] @[Reg.scala 16:23]
    reg r_19 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_19) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_19[0] <= r_18[0] @[Reg.scala 16:23]
      r_19[1] <= r_18[1] @[Reg.scala 16:23]
    mesh.io.in_valid[0][0] <= _WIRE_19[0][0] @[MeshWithDelays.scala 188:20]
    mesh.io.in_valid[0][1] <= _WIRE_19[0][1] @[MeshWithDelays.scala 188:20]
    mesh.io.in_valid[1][0] <= r_19[0] @[MeshWithDelays.scala 188:20]
    mesh.io.in_valid[1][1] <= r_19[1] @[MeshWithDelays.scala 188:20]
    wire _WIRE_20 : UInt<3>[2] @[MeshWithDelays.scala 190:60]
    _WIRE_20[0] <= matmul_id @[MeshWithDelays.scala 190:60]
    _WIRE_20[1] <= matmul_id @[MeshWithDelays.scala 190:60]
    wire _WIRE_21 : UInt<3>[2] @[MeshWithDelays.scala 190:60]
    _WIRE_21[0] <= matmul_id @[MeshWithDelays.scala 190:60]
    _WIRE_21[1] <= matmul_id @[MeshWithDelays.scala 190:60]
    wire matmul_id_vec : UInt<3>[2][2] @[MeshWithDelays.scala 190:30]
    matmul_id_vec[0][0] <= _WIRE_20[0] @[MeshWithDelays.scala 190:30]
    matmul_id_vec[0][1] <= _WIRE_20[1] @[MeshWithDelays.scala 190:30]
    matmul_id_vec[1][0] <= _WIRE_21[0] @[MeshWithDelays.scala 190:30]
    matmul_id_vec[1][1] <= _WIRE_21[1] @[MeshWithDelays.scala 190:30]
    wire _WIRE_22 : UInt<3>[2][2] @[MeshWithDelays.scala 78:26]
    _WIRE_22[0][0] <= matmul_id_vec[0][0] @[MeshWithDelays.scala 78:26]
    _WIRE_22[0][1] <= matmul_id_vec[0][1] @[MeshWithDelays.scala 78:26]
    _WIRE_22[1][0] <= matmul_id_vec[1][0] @[MeshWithDelays.scala 78:26]
    _WIRE_22[1][1] <= matmul_id_vec[1][1] @[MeshWithDelays.scala 78:26]
    reg r_20 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_20) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_20[0] <= _WIRE_22[1][0] @[Reg.scala 16:23]
      r_20[1] <= _WIRE_22[1][1] @[Reg.scala 16:23]
    reg r_21 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_21) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_21[0] <= r_20[0] @[Reg.scala 16:23]
      r_21[1] <= r_20[1] @[Reg.scala 16:23]
    mesh.io.in_id[0][0] <= _WIRE_22[0][0] @[MeshWithDelays.scala 191:17]
    mesh.io.in_id[0][1] <= _WIRE_22[0][1] @[MeshWithDelays.scala 191:17]
    mesh.io.in_id[1][0] <= r_21[0] @[MeshWithDelays.scala 191:17]
    mesh.io.in_id[1][1] <= r_21[1] @[MeshWithDelays.scala 191:17]
    wire _WIRE_23 : UInt<1>[2] @[MeshWithDelays.scala 193:62]
    _WIRE_23[0] <= last_fire @[MeshWithDelays.scala 193:62]
    _WIRE_23[1] <= last_fire @[MeshWithDelays.scala 193:62]
    wire _WIRE_24 : UInt<1>[2] @[MeshWithDelays.scala 193:62]
    _WIRE_24[0] <= last_fire @[MeshWithDelays.scala 193:62]
    _WIRE_24[1] <= last_fire @[MeshWithDelays.scala 193:62]
    wire matmul_last_vec : UInt<1>[2][2] @[MeshWithDelays.scala 193:32]
    matmul_last_vec[0][0] <= _WIRE_23[0] @[MeshWithDelays.scala 193:32]
    matmul_last_vec[0][1] <= _WIRE_23[1] @[MeshWithDelays.scala 193:32]
    matmul_last_vec[1][0] <= _WIRE_24[0] @[MeshWithDelays.scala 193:32]
    matmul_last_vec[1][1] <= _WIRE_24[1] @[MeshWithDelays.scala 193:32]
    wire _WIRE_25 : UInt<1>[2][2] @[MeshWithDelays.scala 78:26]
    _WIRE_25[0][0] <= matmul_last_vec[0][0] @[MeshWithDelays.scala 78:26]
    _WIRE_25[0][1] <= matmul_last_vec[0][1] @[MeshWithDelays.scala 78:26]
    _WIRE_25[1][0] <= matmul_last_vec[1][0] @[MeshWithDelays.scala 78:26]
    _WIRE_25[1][1] <= matmul_last_vec[1][1] @[MeshWithDelays.scala 78:26]
    reg r_22 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_22) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_22[0] <= _WIRE_25[1][0] @[Reg.scala 16:23]
      r_22[1] <= _WIRE_25[1][1] @[Reg.scala 16:23]
    reg r_23 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_23) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_23[0] <= r_22[0] @[Reg.scala 16:23]
      r_23[1] <= r_22[1] @[Reg.scala 16:23]
    mesh.io.in_last[0][0] <= _WIRE_25[0][0] @[MeshWithDelays.scala 194:19]
    mesh.io.in_last[0][1] <= _WIRE_25[0][1] @[MeshWithDelays.scala 194:19]
    mesh.io.in_last[1][0] <= r_23[0] @[MeshWithDelays.scala 194:19]
    mesh.io.in_last[1][1] <= r_23[1] @[MeshWithDelays.scala 194:19]
    node _T_138 = eq(mesh.io.out_control[0][0].dataflow, UInt<1>("h0")) @[MeshWithDelays.scala 198:71]
    node _T_139 = mux(_T_138, mesh.io.out_c, mesh.io.out_b) @[MeshWithDelays.scala 198:35]
    wire _WIRE_26 : SInt<8>[2][2] @[MeshWithDelays.scala 78:26]
    _WIRE_26[0][0] <= _T_139[0][0] @[MeshWithDelays.scala 78:26]
    _WIRE_26[0][1] <= _T_139[0][1] @[MeshWithDelays.scala 78:26]
    _WIRE_26[1][0] <= _T_139[1][0] @[MeshWithDelays.scala 78:26]
    _WIRE_26[1][1] <= _T_139[1][1] @[MeshWithDelays.scala 78:26]
    reg r_24 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_24) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_24[0] <= _WIRE_26[0][0] @[Reg.scala 16:23]
      r_24[1] <= _WIRE_26[0][1] @[Reg.scala 16:23]
    reg r_25 : SInt<8>[2], clock with :
      reset => (UInt<1>("h0"), r_25) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_25[0] <= r_24[0] @[Reg.scala 16:23]
      r_25[1] <= r_24[1] @[Reg.scala 16:23]
    io.resp.bits.data[0][0] <= r_25[0] @[MeshWithDelays.scala 198:21]
    io.resp.bits.data[0][1] <= r_25[1] @[MeshWithDelays.scala 198:21]
    io.resp.bits.data[1][0] <= _WIRE_26[1][0] @[MeshWithDelays.scala 198:21]
    io.resp.bits.data[1][1] <= _WIRE_26[1][1] @[MeshWithDelays.scala 198:21]
    wire _WIRE_27 : UInt<1>[2][2] @[MeshWithDelays.scala 78:26]
    _WIRE_27[0][0] <= mesh.io.out_valid[0][0] @[MeshWithDelays.scala 78:26]
    _WIRE_27[0][1] <= mesh.io.out_valid[0][1] @[MeshWithDelays.scala 78:26]
    _WIRE_27[1][0] <= mesh.io.out_valid[1][0] @[MeshWithDelays.scala 78:26]
    _WIRE_27[1][1] <= mesh.io.out_valid[1][1] @[MeshWithDelays.scala 78:26]
    reg r_26 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_26) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_26[0] <= _WIRE_27[0][0] @[Reg.scala 16:23]
      r_26[1] <= _WIRE_27[0][1] @[Reg.scala 16:23]
    reg r_27 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_27) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_27[0] <= r_26[0] @[Reg.scala 16:23]
      r_27[1] <= r_26[1] @[Reg.scala 16:23]
    io.resp.valid <= r_27[0] @[MeshWithDelays.scala 200:17]
    wire _WIRE_28 : UInt<1>[2][2] @[MeshWithDelays.scala 78:26]
    _WIRE_28[0][0] <= mesh.io.out_last[0][0] @[MeshWithDelays.scala 78:26]
    _WIRE_28[0][1] <= mesh.io.out_last[0][1] @[MeshWithDelays.scala 78:26]
    _WIRE_28[1][0] <= mesh.io.out_last[1][0] @[MeshWithDelays.scala 78:26]
    _WIRE_28[1][1] <= mesh.io.out_last[1][1] @[MeshWithDelays.scala 78:26]
    reg r_28 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_28) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_28[0] <= _WIRE_28[0][0] @[Reg.scala 16:23]
      r_28[1] <= _WIRE_28[0][1] @[Reg.scala 16:23]
    reg r_29 : UInt<1>[2], clock with :
      reset => (UInt<1>("h0"), r_29) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_29[0] <= r_28[0] @[Reg.scala 16:23]
      r_29[1] <= r_28[1] @[Reg.scala 16:23]
    io.resp.bits.last <= r_29[0] @[MeshWithDelays.scala 203:21]
    node _T_140 = eq(io.req.bits.pe_control.dataflow, UInt<1>("h0")) @[MeshWithDelays.scala 218:88]
    node _T_141 = mux(_T_140, UInt<2>("h3"), UInt<2>("h2")) @[MeshWithDelays.scala 218:55]
    node _T_142 = leq(_T_141, UInt<3>("h4")) @[Util.scala 12:16]
    node _T_143 = bits(reset, 0, 0) @[Util.scala 12:13]
    node _T_144 = or(_T_142, _T_143) @[Util.scala 12:13]
    node _T_145 = eq(_T_144, UInt<1>("h0")) @[Util.scala 12:13]
    when _T_145 : @[Util.scala 12:13]
      printf(clock, UInt<1>("h1"), "Assertion failed: cannot wrapAdd when n is larger than max\n    at Util.scala:12 assert(n <= max.U, \"cannot wrapAdd when n is larger than max\")\n") @[Util.scala 12:13]
      stop(clock, UInt<1>("h1"), 1) @[Util.scala 12:13]
    node _T_146 = sub(UInt<3>("h4"), _T_141) @[Util.scala 13:22]
    node _T_147 = tail(_T_146, 1) @[Util.scala 13:22]
    node _T_148 = add(_T_147, UInt<1>("h1")) @[Util.scala 13:26]
    node _T_149 = tail(_T_148, 1) @[Util.scala 13:26]
    node _T_150 = geq(matmul_id, _T_149) @[Util.scala 13:13]
    node _T_151 = neq(_T_141, UInt<1>("h0")) @[Util.scala 13:37]
    node _T_152 = and(_T_150, _T_151) @[Util.scala 13:32]
    node _T_153 = sub(UInt<3>("h4"), matmul_id) @[Util.scala 13:57]
    node _T_154 = tail(_T_153, 1) @[Util.scala 13:57]
    node _T_155 = sub(_T_141, _T_154) @[Util.scala 13:48]
    node _T_156 = tail(_T_155, 1) @[Util.scala 13:48]
    node _T_157 = sub(_T_156, UInt<1>("h1")) @[Util.scala 13:62]
    node _T_158 = tail(_T_157, 1) @[Util.scala 13:62]
    node _T_159 = add(matmul_id, _T_141) @[Util.scala 13:71]
    node _T_160 = tail(_T_159, 1) @[Util.scala 13:71]
    node matmul_id_of_output = mux(_T_152, _T_158, _T_160) @[Util.scala 13:10]
    node _T_161 = leq(UInt<1>("h1"), UInt<3>("h4")) @[Util.scala 12:16]
    node _T_162 = bits(reset, 0, 0) @[Util.scala 12:13]
    node _T_163 = or(_T_161, _T_162) @[Util.scala 12:13]
    node _T_164 = eq(_T_163, UInt<1>("h0")) @[Util.scala 12:13]
    when _T_164 : @[Util.scala 12:13]
      printf(clock, UInt<1>("h1"), "Assertion failed: cannot wrapAdd when n is larger than max\n    at Util.scala:12 assert(n <= max.U, \"cannot wrapAdd when n is larger than max\")\n") @[Util.scala 12:13]
      stop(clock, UInt<1>("h1"), 1) @[Util.scala 12:13]
    node _T_165 = sub(UInt<3>("h4"), UInt<1>("h1")) @[Util.scala 13:22]
    node _T_166 = tail(_T_165, 1) @[Util.scala 13:22]
    node _T_167 = add(_T_166, UInt<1>("h1")) @[Util.scala 13:26]
    node _T_168 = tail(_T_167, 1) @[Util.scala 13:26]
    node _T_169 = geq(matmul_id, _T_168) @[Util.scala 13:13]
    node _T_170 = neq(UInt<1>("h1"), UInt<1>("h0")) @[Util.scala 13:37]
    node _T_171 = and(_T_169, _T_170) @[Util.scala 13:32]
    node _T_172 = sub(UInt<3>("h4"), matmul_id) @[Util.scala 13:57]
    node _T_173 = tail(_T_172, 1) @[Util.scala 13:57]
    node _T_174 = sub(UInt<1>("h1"), _T_173) @[Util.scala 13:48]
    node _T_175 = tail(_T_174, 1) @[Util.scala 13:48]
    node _T_176 = sub(_T_175, UInt<1>("h1")) @[Util.scala 13:62]
    node _T_177 = tail(_T_176, 1) @[Util.scala 13:62]
    node _T_178 = add(matmul_id, UInt<1>("h1")) @[Util.scala 13:71]
    node _T_179 = tail(_T_178, 1) @[Util.scala 13:71]
    node matmul_id_of_current = mux(_T_171, _T_177, _T_179) @[Util.scala 13:10]
    inst tagq of TagQueue @[MeshWithDelays.scala 221:20]
    tagq.clock <= clock
    tagq.reset <= reset
    node _T_180 = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _T_181 = eq(io.req.bits.flush, UInt<1>("h0")) @[MeshWithDelays.scala 222:57]
    node _T_182 = and(_T_180, _T_181) @[MeshWithDelays.scala 222:36]
    tagq.io.enq.valid <= _T_182 @[MeshWithDelays.scala 222:21]
    tagq.io.enq.bits.tag <= io.req.bits.tag @[MeshWithDelays.scala 223:24]
    tagq.io.enq.bits.total_rows is invalid @[MeshWithDelays.scala 224:31]
    tagq.io.enq.bits.id <= matmul_id_of_output @[MeshWithDelays.scala 225:23]
    wire tag_garbage : UInt<32> @[MeshWithDelays.scala 227:25]
    tag_garbage <= UInt<1>("h0") @[MeshWithDelays.scala 228:15]
    wire _WIRE_29 : UInt<3>[2][2] @[MeshWithDelays.scala 78:26]
    _WIRE_29[0][0] <= mesh.io.out_id[0][0] @[MeshWithDelays.scala 78:26]
    _WIRE_29[0][1] <= mesh.io.out_id[0][1] @[MeshWithDelays.scala 78:26]
    _WIRE_29[1][0] <= mesh.io.out_id[1][0] @[MeshWithDelays.scala 78:26]
    _WIRE_29[1][1] <= mesh.io.out_id[1][1] @[MeshWithDelays.scala 78:26]
    reg r_30 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_30) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_30[0] <= _WIRE_29[0][0] @[Reg.scala 16:23]
      r_30[1] <= _WIRE_29[0][1] @[Reg.scala 16:23]
    reg r_31 : UInt<3>[2], clock with :
      reset => (UInt<1>("h0"), r_31) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_31[0] <= r_30[0] @[Reg.scala 16:23]
      r_31[1] <= r_30[1] @[Reg.scala 16:23]
    wire out_matmul_id : UInt
    out_matmul_id <= r_31[0]
    node _T_183 = eq(out_matmul_id, tagq.io.deq.bits.id) @[MeshWithDelays.scala 232:62]
    node _T_184 = and(tagq.io.deq.valid, _T_183) @[MeshWithDelays.scala 232:45]
    node _T_185 = mux(_T_184, tagq.io.deq.bits.tag, tag_garbage) @[MeshWithDelays.scala 232:26]
    io.resp.bits.tag <= _T_185 @[MeshWithDelays.scala 232:20]
    node _T_186 = and(io.resp.valid, io.resp.bits.last) @[MeshWithDelays.scala 236:38]
    node _T_187 = eq(out_matmul_id, tagq.io.deq.bits.id) @[MeshWithDelays.scala 236:76]
    node _T_188 = and(_T_186, _T_187) @[MeshWithDelays.scala 236:59]
    tagq.io.deq.ready <= _T_188 @[MeshWithDelays.scala 236:21]
    inst total_rows_q of Queue @[MeshWithDelays.scala 238:28]
    total_rows_q.clock <= clock
    total_rows_q.reset <= reset
    node _T_189 = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _T_190 = eq(io.req.bits.flush, UInt<1>("h0")) @[MeshWithDelays.scala 239:65]
    node _T_191 = and(_T_189, _T_190) @[MeshWithDelays.scala 239:44]
    total_rows_q.io.enq.valid <= _T_191 @[MeshWithDelays.scala 239:29]
    total_rows_q.io.enq.bits.tag is invalid @[MeshWithDelays.scala 240:32]
    total_rows_q.io.enq.bits.total_rows <= io.req.bits.total_rows @[MeshWithDelays.scala 241:39]
    total_rows_q.io.enq.bits.id <= matmul_id_of_current @[MeshWithDelays.scala 242:31]
    node _T_192 = eq(out_matmul_id, total_rows_q.io.deq.bits.id) @[MeshWithDelays.scala 244:77]
    node _T_193 = and(total_rows_q.io.deq.valid, _T_192) @[MeshWithDelays.scala 244:60]
    node _T_194 = mux(_T_193, total_rows_q.io.deq.bits.total_rows, UInt<3>("h4")) @[MeshWithDelays.scala 244:33]
    io.resp.bits.total_rows <= _T_194 @[MeshWithDelays.scala 244:27]
    node _T_195 = and(io.resp.valid, io.resp.bits.last) @[MeshWithDelays.scala 247:46]
    node _T_196 = eq(out_matmul_id, total_rows_q.io.deq.bits.id) @[MeshWithDelays.scala 247:84]
    node _T_197 = and(_T_195, _T_196) @[MeshWithDelays.scala 247:67]
    total_rows_q.io.deq.ready <= _T_197 @[MeshWithDelays.scala 247:29]
    node _T_198 = eq(req.valid, UInt<1>("h0")) @[MeshWithDelays.scala 249:20]
    node _T_199 = or(_T_198, last_fire) @[MeshWithDelays.scala 249:31]
    node _T_200 = and(_T_199, tagq.io.enq.ready) @[MeshWithDelays.scala 249:45]
    node _T_201 = and(_T_200, total_rows_q.io.enq.ready) @[MeshWithDelays.scala 249:66]
    io.req.ready <= _T_201 @[MeshWithDelays.scala 249:16]
    io.tags_in_progress[0] <= tagq.io.all[0].tag @[MeshWithDelays.scala 250:23]
    io.tags_in_progress[1] <= tagq.io.all[1].tag @[MeshWithDelays.scala 250:23]
    io.tags_in_progress[2] <= tagq.io.all[2].tag @[MeshWithDelays.scala 250:23]
    io.tags_in_progress[3] <= tagq.io.all[3].tag @[MeshWithDelays.scala 250:23]
    io.tags_in_progress[4] <= tagq.io.all[4].tag @[MeshWithDelays.scala 250:23]
    io.tags_in_progress[5] <= tagq.io.all[5].tag @[MeshWithDelays.scala 250:23]
    node _T_202 = bits(reset, 0, 0) @[MeshWithDelays.scala 252:21]
    when _T_202 : @[MeshWithDelays.scala 252:25]
      req.valid <= UInt<1>("h0") @[MeshWithDelays.scala 253:15]
    node _T_203 = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _T_204 = eq(tagq.io.enq.ready, UInt<1>("h0")) @[MeshWithDelays.scala 256:27]
    node _T_205 = and(_T_203, _T_204) @[MeshWithDelays.scala 256:24]
    node _T_206 = eq(io.req.bits.flush, UInt<1>("h0")) @[MeshWithDelays.scala 256:67]
    node _T_207 = and(_T_205, _T_206) @[MeshWithDelays.scala 256:46]
    node _T_208 = eq(_T_207, UInt<1>("h0")) @[MeshWithDelays.scala 256:10]
    node _T_209 = bits(reset, 0, 0) @[MeshWithDelays.scala 256:9]
    node _T_210 = or(_T_208, _T_209) @[MeshWithDelays.scala 256:9]
    node _T_211 = eq(_T_210, UInt<1>("h0")) @[MeshWithDelays.scala 256:9]
    when _T_211 : @[MeshWithDelays.scala 256:9]
      printf(clock, UInt<1>("h1"), "Assertion failed\n    at MeshWithDelays.scala:256 assert(!(io.req.fire && !tagq.io.enq.ready && io.req.bits.flush === 0.U))\n") @[MeshWithDelays.scala 256:9]
      stop(clock, UInt<1>("h1"), 1) @[MeshWithDelays.scala 256:9]

