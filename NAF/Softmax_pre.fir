circuit Softmax_pre :
  module Softmax_pre :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in : SInt<12>, flip state : UInt<3>, flip add_res : SInt<16>, flip last_in : UInt<1>, flip max_first : UInt<1>, flip max_en : UInt<1>, flip rd_sum : UInt<1>, flip rd_ln : UInt<1>, out : SInt<12>, last_out : UInt<1>}

    reg max_reg : SInt<12>, clock with :
      reset => (UInt<1>("h0"), max_reg) @[softmax_pre.scala 22:22]
    reg ln_reg : SInt<16>, clock with :
      reset => (UInt<1>("h0"), ln_reg) @[softmax_pre.scala 23:21]
    wire io_out : SInt<12> @[softmax_pre.scala 25:22]
    wire io_out_norm : SInt<12> @[softmax_pre.scala 26:27]
    wire io_ln_valid : UInt<1> @[softmax_pre.scala 27:27]
    node _T = bits(io.in, 11, 11) @[softmax_pre.scala 29:53]
    node _T_1 = eq(_T, UInt<1>("h0")) @[softmax_pre.scala 29:47]
    node _T_2 = bits(_T_1, 0, 0) @[Bitwise.scala 72:15]
    node _T_3 = mux(_T_2, UInt<12>("hfff"), UInt<12>("h0")) @[Bitwise.scala 72:12]
    node _T_4 = asSInt(_T_3) @[softmax_pre.scala 29:71]
    node _T_5 = xor(io.in, _T_4) @[softmax_pre.scala 29:26]
    node _T_6 = asSInt(_T_5) @[softmax_pre.scala 29:26]
    io_out_norm <= _T_6 @[softmax_pre.scala 29:17]
    node _T_7 = eq(io.state, UInt<3>("h2")) @[softmax_pre.scala 30:28]
    node _T_8 = sub(io.in, max_reg) @[softmax_pre.scala 30:46]
    node _T_9 = tail(_T_8, 1) @[softmax_pre.scala 30:46]
    node _T_10 = asSInt(_T_9) @[softmax_pre.scala 30:46]
    node _T_11 = eq(io.state, UInt<3>("h3")) @[softmax_pre.scala 30:70]
    node _T_12 = eq(io.state, UInt<3>("h4")) @[softmax_pre.scala 30:101]
    node _T_13 = sub(io.in, max_reg) @[softmax_pre.scala 30:119]
    node _T_14 = tail(_T_13, 1) @[softmax_pre.scala 30:119]
    node _T_15 = asSInt(_T_14) @[softmax_pre.scala 30:119]
    node _T_16 = sub(_T_15, ln_reg) @[softmax_pre.scala 30:129]
    node _T_17 = tail(_T_16, 1) @[softmax_pre.scala 30:129]
    node _T_18 = asSInt(_T_17) @[softmax_pre.scala 30:129]
    node _T_19 = mux(_T_12, _T_18, io_out_norm) @[softmax_pre.scala 30:91]
    node _T_20 = mux(_T_11, ln_reg, _T_19) @[softmax_pre.scala 30:60]
    node _T_21 = mux(_T_7, _T_10, _T_20) @[softmax_pre.scala 30:18]
    io_out <= _T_21 @[softmax_pre.scala 30:12]
    node _T_22 = eq(io.state, UInt<3>("h3")) @[softmax_pre.scala 31:59]
    reg r : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r <= _T_22 @[Reg.scala 16:23]
    node _T_23 = not(r) @[softmax_pre.scala 31:35]
    node _T_24 = eq(io.state, UInt<3>("h3")) @[softmax_pre.scala 31:85]
    node _T_25 = and(_T_23, _T_24) @[softmax_pre.scala 31:73]
    reg r_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_1) @[Reg.scala 15:16]
    when UInt<1>("h1") : @[Reg.scala 16:19]
      r_1 <= _T_25 @[Reg.scala 16:23]
    io_ln_valid <= r_1 @[softmax_pre.scala 31:17]
    node _T_26 = bits(io.max_first, 0, 0) @[softmax_pre.scala 33:23]
    when _T_26 : @[softmax_pre.scala 33:30]
      max_reg <= io.in @[softmax_pre.scala 34:17]
    else :
      node _T_27 = bits(io.max_en, 0, 0) @[softmax_pre.scala 35:26]
      when _T_27 : @[softmax_pre.scala 35:33]
        node _T_28 = lt(max_reg, io.in) @[softmax_pre.scala 36:32]
        node _T_29 = mux(_T_28, io.in, max_reg) @[softmax_pre.scala 36:23]
        max_reg <= _T_29 @[softmax_pre.scala 36:17]
    node _T_30 = bits(io.rd_sum, 0, 0) @[softmax_pre.scala 38:20]
    node _T_31 = bits(io.rd_ln, 0, 0) @[softmax_pre.scala 38:39]
    node _T_32 = or(_T_30, _T_31) @[softmax_pre.scala 38:27]
    when _T_32 : @[softmax_pre.scala 38:46]
      ln_reg <= io.add_res @[softmax_pre.scala 39:16]
    io.out <= io_out @[softmax_pre.scala 43:16]
    node _T_33 = eq(io.state, UInt<3>("h3")) @[softmax_pre.scala 44:37]
    node _T_34 = mux(_T_33, io_ln_valid, io.last_in) @[softmax_pre.scala 44:27]
    io.last_out <= _T_34 @[softmax_pre.scala 44:21]

